
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт
    МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.АвансовыйОтчет");
    
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
    Информация = НСтр("ru = 'Сокращенная форма Авансовый отчет (ПАО Татнефть) '");
    ПараметрыРегистрации.Информация = Информация;
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
    ПараметрыРегистрации.Версия = "0.0.0.1";
    ПараметрыРегистрации.БезопасныйРежим = Истина;
    ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);

    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр("ru = 'Авансовый отчет (ПАО Татнефть) '");
    Команда.Идентификатор = "АвансовыйОтчетТатнефть";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
    Команда.ПоказыватьОповещение = Ложь;

    Возврат ПараметрыРегистрации;
    
КонецФункции

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода = Неопределено)  экспорт 

    ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

     Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчетТатнефть") Тогда	

          УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
                            "АвансовыйОтчетТатнефть",  
                            "АвансовыйОтчетТатнефть", 
                СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати)); 
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация
Функция СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати)
	
	ШаблонОшибки = НСтр("ru = 'Печать АО-1 используется только для документов с операцией ""Закупка через подотчетное лицо"".';
						|en = 'You should print AO-1 only for documents with the ""Purchase through advance holder"" operation.'");
	
	ИспользуетсяРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаПечати(ИспользуетсяРеглУчет);
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	//++ НЕ УТ
	МассивНеОтраженныхДокументов = Неопределено;
	Запрос.УстановитьПараметр("МассивНеОтраженныхДокументов", МассивНеОтраженныхДокументов);
	//-- НЕ УТ
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = МассивРезультатов[13].Выбрать();
	ВыборкаПоказатели = МассивРезультатов[12].Выбрать();
	ВыборкаКонвертация = МассивРезультатов[15].Выбрать();
	ВыборкаОборотнаяСторона = МассивРезультатов[14].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользуетсяРеглУчет Тогда
		//ВыборкаПроводок = МассивРезультатов[18].Выбрать();
		//ВыборкаСчетов = МассивРезультатов[19].Выбрать();
		//ВыборкаСчетовУточнение = МассивРезультатов[19].Выбрать();
        //Проводки = МассивРезультатов[18].Выгрузить();
	Иначе
		//ВыборкаПроводок = МассивРезультатов[16].Выбрать();
        //ВыборкаСчетов = МассивРезультатов[16].Выбрать();
        //ВыборкаСчетовУточнение = МассивРезультатов[16].Выбрать();
        //Проводки = МассивРезультатов[16].Выгрузить();
	КонецЕсли;
	
	Если МассивРезультатов[13].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонОшибки);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПечатьВИностраннойВалюте = Выборка.Мультивалютный;
        Если ПечатьВИностраннойВалюте Тогда
            Макет = ПолучитьМакет("ПФ_MXL_АвансовыйОтчетВИностраннойВалюте_ru");
        Иначе
            Макет = ПолучитьМакет("ПФ_MXL_АвансовыйОтчет_ru");
		КонецЕсли;
		
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьТитул = Макет.ПолучитьОбласть("Титул");
		ОбластьТитулПодвал = Макет.ПолучитьОбласть("ТитулПодвал");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьТитул, Выборка.Ссылка);
		
		ОбластьТитул.Параметры.Заполнить(Выборка);
		ОбластьТитул.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		ОбластьТитул.Параметры.РуководительПредставление = Выборка.Руководитель;
		
		ОбластьТитулПодвал.Параметры.Заполнить(Выборка);
        //ОбластьТитулПодвал.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		//ОбластьТитулПодвал.Параметры.ГлавныйБухгалтерПредставление = Выборка.ГлавныйБухгалтер;
		
		//++ НЕ УТ
		ПараметрыПолученияДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияДанных.Организация = Выборка.Организация;
		ПараметрыПолученияДанных.НачалоПериода = Выборка.ДатаДокумента;
		ПараметрыПолученияДанных.ОкончаниеПериода = Выборка.ДатаДокумента;
		ПараметрыПолученияДанных.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ПодотчетноеЛицо);
		
		Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияДанных);
		
		ПолучаемыеДанные = Новый Массив;
		ПолучаемыеДанные.Добавить("Должность");
		ПолучаемыеДанные.Добавить("ТабельныйНомер");

		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина, Сотрудники.ВыгрузитьКолонку("Сотрудник"), ПолучаемыеДанные, Выборка.ДатаДокумента);
			
		Если КадровыеДанные.Количество() > 0 Тогда
			ОбластьТитул.Параметры.ТабельныйНомер = КадровыеДанные[0].ТабельныйНомер;
			ОбластьТитул.Параметры.ДолжностьПодотчетногоЛицаПредставление = КадровыеДанные[0].Должность;
		КонецЕсли;
		//-- НЕ УТ
		
		СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
		
		Если Не ПечатьВИностраннойВалюте Тогда
			
			ПолученоИзКассы = 0; ПолученоПоБанковскимКартам = 0;
			ПолученоИзКассыВВалюте = ""; ПолученоПоБанковскимКартамВВалюте = "";
			НачальныйОстаток = 0; НачальныйПерерасход = 0;
			КонечныйОстаток = 0; КонечныйПерерасход = 0;
			Израсходовано = 0;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				
				Если ВыборкаПоказатели.Валюта <> ВалютаРегламентированногоУчета Тогда
					Если ВыборкаПоказатели.СуммаВыданоНаличными > 0 Тогда
						ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте
							+ " " + Строка(ВыборкаПоказатели.СуммаВыданоНаличными)
							+ " " + Строка(ВыборкаПоказатели.Валюта) + " ";
					КонецЕсли;
					Если ВыборкаПоказатели.СуммаВыданоКартой > 0 Тогда
						ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте
							+ " " + Строка(ВыборкаПоказатели.СуммаВыданоКартой)
							+ " " + Строка(ВыборкаПоказатели.Валюта) + " ";
					КонецЕсли;
				КонецЕсли;
				
				ПолученоИзКассы = ПолученоИзКассы + ВыборкаПоказатели.СуммаВыданоНаличнымиРегл;
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам + ВыборкаПоказатели.СуммаВыданоКартойРегл;
				
				НачальныйОстаток = НачальныйОстаток + ВыборкаПоказатели.НачальныйОстатокРегл;
				НачальныйПерерасход = НачальныйПерерасход + ВыборкаПоказатели.НачальныйПерерасходРегл;
				КонечныйОстаток = КонечныйОстаток + ВыборкаПоказатели.КонечныйОстатокРегл;
				КонечныйПерерасход = КонечныйПерерасход + ВыборкаПоказатели.КонечныйПерерасходРегл;
				Израсходовано = Израсходовано + ВыборкаПоказатели.СуммаИзрасходованоРегл;
			КонецЦикла;
			
			ВыборкаПоказатели.Сбросить();
			
			ВыводитьВалюту = Истина;
			Если НачальныйПерерасход > 0 И (ПолученоИзКассы > 0 Или ПолученоПоБанковскимКартам > 0) Тогда
				ВыводитьВалюту = Ложь;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоИзКассы);
				ПолученоИзКассы = ПолученоИзКассы - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоПоБанковскимКартам);
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			ОбластьТитул.Параметры.ПолученоИзКассы = ПолученоИзКассы;
			ОбластьТитул.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
			ОбластьТитул.Параметры.ИтогоПолучено = ПолученоИзКассы + ПолученоПоБанковскимКартам;
			Если ВыводитьВалюту Тогда
				ОбластьТитул.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте;
				ОбластьТитул.Параметры.ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте;
			КонецЕсли;
			ОбластьТитул.Параметры.НачальныйОстаток = НачальныйОстаток;
			ОбластьТитул.Параметры.НачальныйПерерасход = НачальныйПерерасход;
			ОбластьТитул.Параметры.КонечныйОстаток = КонечныйОстаток;
			ОбластьТитул.Параметры.КонечныйПерерасход = КонечныйПерерасход;
			ОбластьТитул.Параметры.Израсходовано = Израсходовано;
			
			ОбластьТитулПодвал.Параметры.СуммаОтчетаПрописью =
				РаботаСКурсамиВалют.СформироватьСуммуПрописью(Израсходовано, ВалютаРегламентированногоУчета, Ложь);
			
			ИспСумма = Окр(Израсходовано, 2, 1);
			ЦелСумма = Цел(Израсходовано);
			КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			ОбластьТитул.Параметры.ИзрасходованоРуб = ЦелСумма;
			ОбластьТитул.Параметры.ИзрасходованоКоп = Формат(КопСумма,"ЧН=00");
			
			Счетчик = 0;
            //Проводки.Свернуть("Регистратор, СчетДт, СчетКт", "Сумма");
            //СтруктураПоиска = Новый Структура("Регистратор", Выборка.Ссылка);
            //НайденныеПроводки = Проводки.НайтиСтроки(СтруктураПоиска);
            //Для каждого Проводка Из НайденныеПроводки Цикл
            //	Счетчик = Счетчик + 1;
            //	Если Счетчик < 9 Тогда
            //		ОбластьТитул.Параметры["СубСчетДебет"  + Счетчик] = Проводка.СчетДт;
            //		ОбластьТитул.Параметры["СуммаДебет"    + Счетчик] = Проводка.Сумма;
            //		ОбластьТитул.Параметры["СубСчетКредит" + Счетчик] = Проводка.СчетКт;
            //		ОбластьТитул.Параметры["СуммаКредит"   + Счетчик] = Проводка.Сумма;
            //	Иначе
            //		Если Счетчик = 9 Тогда
            //			ТабличныйДокумент.Вывести(ОбластьТитул);
            //		КонецЕсли;
            //		ОбластьПроводок = Макет.ПолучитьОбласть("СтрокаПроводок");
            //		ОбластьПроводок.Параметры["СубСчетДебет" ] = Проводка.СчетДт;
            //		ОбластьПроводок.Параметры["СуммаДебет"   ] = Проводка.Сумма;
            //		ОбластьПроводок.Параметры["СубСчетКредит"] = Проводка.СчетКт;
            //		ОбластьПроводок.Параметры["СуммаКредит"  ] = Проводка.Сумма;
            //		ТабличныйДокумент.Вывести(ОбластьПроводок);
            //	КонецЕсли;
            //КонецЦикла;
			
			Если Счетчик < 9 Тогда
				ТабличныйДокумент.Вывести(ОбластьТитул);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ИтогоПоОтчету = 0;
			ИтогоПоОтчетуВВалюте = 0;
			ИтогоПоУчету = 0;
			ИтогоПоУчетуВВалюте = 0;
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ИтогоПоОтчету = ИтогоПоОтчету + ВыборкаПоРасходам.ПоОтчету;
				ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + ВыборкаПоРасходам.ПоОтчетуВВалюте;
				ИтогоПоУчету = ИтогоПоУчету + ВыборкаПоРасходам.ПоУчету;
				ИтогоПоУчетуВВалюте = ИтогоПоУчетуВВалюте + ВыборкаПоРасходам.ПоУчетуВВалюте;
				
                //ОбластьМакета.Параметры.ДебетСубСчета = "";
				
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда // Оплата и прочие расходы
					
					МассивСчетов = Новый Массив;
					
					Если ЗначениеЗаполнено(ВыборкаПоРасходам.СчетУчета) Тогда
						
						МассивСчетов.Добавить(ВыборкаПоРасходам.СчетУчета);
					Иначе
						
						Если ИспользуетсяРеглУчет Тогда
						
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ДокументДвижения", ВыборкаПоРасходам.ДокументДвижения);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
							
                        //	ВыборкаСчетов.Сбросить();
                        //
                        //	Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
                        //		МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
                        //	КонецЦикла;
                        //	
                        //    СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
                        //    
                        //    ВыборкаСчетов.Сбросить();
                        //    Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
                        //    	МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
                        //    КонецЦикла;
							
							// НДС
							Если ВыборкаПоРасходам.НомерРаздела = 1 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ДокументДвижения", ВыборкаПоРасходам.ДокументДвижения);
								СтруктураПоиска.Вставить("ЗначениеСубконто",
									?(ЗначениеЗаполнено(ВыборкаПоРасходам.Контрагент), ВыборкаПоРасходам.Контрагент, Неопределено));
								
                                //ВыборкаСчетов.Сбросить();
                                //Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
                                //	
                                //	СтруктураПоискаУточнение = Новый Структура;
                                //	СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
                                //	СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
                                //	Если ЗначениеЗаполнено(ВыборкаПоРасходам.ПервичныйДокумент) Тогда
                                //		СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.ПервичныйДокумент);
                                //	Иначе
                                //		СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.Ссылка);
                                //	КонецЕсли;
                                //	
                                //	ВыборкаСчетовУточнение.Сбросить();
                                //	Пока ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Цикл
                                //		МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
                                //	КонецЦикла;
                                //КонецЦикла;
							КонецЕсли;
							
							// Оплата
							Если ВыборкаПоРасходам.НомерРаздела = 2 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
								
                                //ВыборкаСчетов.Сбросить();
                                //Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
                                //	
                                //	СтруктураПоискаУточнение = Новый Структура;
                                //	СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
                                //	СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
                                //	СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", Выборка.Ссылка);
                                //	
                                //    ВыборкаСчетовУточнение.Сбросить();
                                //    Если Не ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Тогда
                                //    	МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
                                //    КонецЕсли;
                                //КонецЦикла;
							КонецЕсли;
						Иначе
							
							Если ВыборкаПоРасходам.НомерРаздела = 0 Тогда // Закупка
								
								СтруктураПоиска = Новый Структура();
								СтруктураПоиска.Вставить("Регистратор", Выборка.Ссылка);
								
                                //ВыборкаПроводок.Сбросить();
                                //МассивСчетов = Новый Массив;
                                //
                                //Пока ВыборкаПроводок.НайтиСледующий(СтруктураПоиска) Цикл
                                //	МассивСчетов.Добавить(ВыборкаПроводок.СчетДт);
                                //КонецЦикла;
								
							Иначе
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
								
                                //ВыборкаСчетов.Сбросить();
                                //Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
                                //	МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
                                //КонецЦикла;
								
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
								
                                //ВыборкаСчетов.Сбросить();
                                //Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
                                //	МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
                                //КонецЦикла;
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
								
                                //ВыборкаСчетов.Сбросить();
                                //Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
                                //	МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
                                //КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
                //ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
                //Для каждого СчетДт Из МассивСчетов Цикл
                //	ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
                //		+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
                //		+ СчетДт;
                //КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
			ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
			ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоУчету;
			ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоУчетуВВалюте;
			ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = Выборка.ПредставлениеПодотчетногоЛица;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
			
		Иначе // Валютный отчет
			
			ТабличныйДокумент.Вывести(ОбластьТитул);
			
			Область = Макет.ПолучитьОбласть("Титул1|Показатели");
			ТабличныйДокумент.Вывести(Область);
			ЕстьСтрокаКонвертации = ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
			Если ЕстьСтрокаКонвертации Тогда
				Область = Макет.ПолучитьОбласть("Титул1|Конвертация");
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.НачальныйОстаток <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.НачальныйОстаток;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул2|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.НачальныйПерерасход <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.НачальныйПерерасход;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул3|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаВыданоНаличными <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаВыданоНаличными;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул4|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаВыданоКартой <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаВыданоКартой;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул5|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаИзрасходовано <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаИзрасходовано;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул6|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.КонечныйОстаток <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.КонечныйОстаток;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул7|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Пока ЕстьСтрокаКонвертации Цикл
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЦикла;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.КонечныйПерерасход <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.КонечныйПерерасход;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапросаПечати(ИспользуетсяРеглУчет)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ДанныеРегистра.Регистратор
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	//++ НЕ УТ
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПоступлениеДенежныхДокументов).АвансовыйОтчет
	//-- НЕ УТ
	|	КОНЕЦ КАК Ссылка,
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ПериодОтчет,
	|	МИНИМУМ(ДанныеРегистра.Период) КАК НачальныйПериодОтчет
	|ПОМЕСТИТЬ ВТПериоды1
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|ГДЕ
	|	(ДанныеРегистра.Регистратор В (&МассивДокументов)
	|			ИЛИ ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет В (&МассивДокументов)
	//++ НЕ УТ
	|			ИЛИ ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПоступлениеДенежныхДокументов).АвансовыйОтчет В (&МассивДокументов)
	//-- НЕ УТ
	|			)

	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ПодотчетноеЛицо,
	|	ДанныеРегистра.Подразделение,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ДанныеРегистра.Регистратор
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	//++ НЕ УТ
	|		КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПоступлениеДенежныхДокументов).АвансовыйОтчет
	//-- НЕ УТ
	|	КОНЕЦ
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.НачальныйПериодОтчет КАК НачальныйПериодОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТПериоды2
	|ИЗ
	|	ВТПериоды1 КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Организация = ВТПериоды.Организация)
	|			И (ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо)
	|			И (ДанныеРегистра.Подразделение = ВТПериоды.Подразделение)
	|			И (ДанныеРегистра.Период = ВТПериоды.ПериодОтчет)
	|			И (ВЫБОР
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ТОГДА ДанныеРегистра.Регистратор
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	//++ НЕ УТ
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПоступлениеДенежныхДокументов).АвансовыйОтчет
	//-- НЕ УТ
	|			КОНЕЦ = ВТПериоды.Ссылка)

	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.НачальныйПериодОтчет
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.НачальныйПериодОтчет КАК НачальныйПериодОтчет,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВТПериоды.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.Регистратор КАК Документ.АвансовыйОтчет).МоментВремени
	|		КОГДА ВТПериоды.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.Регистратор КАК Документ.ПриобретениеТоваровУслуг).МоментВремени
	//++ НЕ УТ
	|		КОГДА ВТПериоды.Регистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.Регистратор КАК Документ.ПоступлениеДенежныхДокументов).МоментВремени
	//-- НЕ УТ
	|	КОНЕЦ КАК МоментВремениТекущийОтчет
	|ПОМЕСТИТЬ ВТПериоды3
	|ИЗ
	|	ВТПериоды2 КАК ВТПериоды
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет КАК МоментВремениТекущийОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Регистратор) КАК НачальныйРегистратор
	|ПОМЕСТИТЬ ВТПериоды4
	|ИЗ
	|	ВТПериоды3 КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Организация = ВТПериоды.Организация)
	|			И (ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо)
	|			И (ДанныеРегистра.Подразделение = ВТПериоды.Подразделение)
	|			И (ДанныеРегистра.Период = ВТПериоды.НачальныйПериодОтчет)
	|			И (ВЫБОР
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|					ТОГДА ДанныеРегистра.Регистратор
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПриобретениеТоваровУслуг).АвансовыйОтчет
	//++ НЕ УТ
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	|					ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.ПоступлениеДенежныхДокументов).АвансовыйОтчет
	//-- НЕ УТ
	|			КОНЕЦ = ВТПериоды.Ссылка)

	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет,
	|	ВЫБОР
	|		КОГДА ВТПериоды.НачальныйРегистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.НачальныйРегистратор КАК Документ.АвансовыйОтчет).МоментВремени
	|		КОГДА ВТПериоды.НачальныйРегистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.НачальныйРегистратор КАК Документ.ПриобретениеТоваровУслуг).МоментВремени
	//++ НЕ УТ
	|		КОГДА ВТПериоды.НачальныйРегистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	|			ТОГДА ВЫРАЗИТЬ(ВТПериоды.НачальныйРегистратор КАК Документ.ПоступлениеДенежныхДокументов).МоментВремени
	//-- НЕ УТ
	|	КОНЕЦ КАК НачальныйМоментВремениТекущийОтчет
	|ПОМЕСТИТЬ ВТПериоды5
	|ИЗ
	|	ВТПериоды4 КАК ВТПериоды
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация КАК Организация,
	|	ВТПериоды.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение КАК Подразделение,
	|	ВТПериоды.Ссылка КАК Ссылка,
	|	ВТПериоды.Регистратор КАК Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет КАК МоментВремениТекущийОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК ПериодПредыдущийОтчет
	|ПОМЕСТИТЬ ВТПериоды6
	|ИЗ
	|	ВТПериоды5 КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|		ПО (ДанныеРегистра.Организация = ВТПериоды.Организация)
	|			И (ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо)
	|			И (ДанныеРегистра.Подразделение = ВТПериоды.Подразделение)
	|			И (ДанныеРегистра.МоментВремени < ВТПериоды.НачальныйМоментВремениТекущийОтчет)
	|			И (ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	//++ НЕ УТ
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	//-- НЕ УТ
	|			)

	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет
	|;

	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет,
	|	МАКСИМУМ(ДанныеРегистра.Регистратор) КАК ПредыдущийОтчет
	|ПОМЕСТИТЬ ВТПериоды7
	|ИЗ
	|	ВТПериоды6 КАК ВТПериоды

	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Организация = ВТПериоды.Организация
	|		И ДанныеРегистра.ПодотчетноеЛицо = ВТПериоды.ПодотчетноеЛицо
	|		И ДанныеРегистра.Подразделение = ВТПериоды.Подразделение
	|		И ДанныеРегистра.Период = ВТПериоды.ПериодПредыдущийОтчет	
	|		И (ДанныеРегистра.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|			ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ПриобретениеТоваровУслуг
	//++ НЕ УТ
	|			ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ПоступлениеДенежныхДокументов
	//-- НЕ УТ
	|			)

	|СГРУППИРОВАТЬ ПО
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет
	|;
	|	
	|ВЫБРАТЬ
	|	ВТПериоды.Организация,
	|	ВТПериоды.ПодотчетноеЛицо,
	|	ВТПериоды.Подразделение,
	|	ВТПериоды.Ссылка,
	|	ВТПериоды.Регистратор,
	|	ВТПериоды.МоментВремениТекущийОтчет,
	|	ВЫБОР
	|		КОГДА ВТПериоды.ПредыдущийОтчет ССЫЛКА Документ.АвансовыйОтчет ТОГДА
	|			ВЫРАЗИТЬ(ВТПериоды.ПредыдущийОтчет КАК Документ.АвансовыйОтчет).МоментВремени
	|		КОГДА ВТПериоды.ПредыдущийОтчет ССЫЛКА Документ.ПриобретениеТоваровУслуг ТОГДА
	|			ВЫРАЗИТЬ(ВТПериоды.ПредыдущийОтчет КАК Документ.ПриобретениеТоваровУслуг).МоментВремени
	//++ НЕ УТ
	|		КОГДА ВТПериоды.ПредыдущийОтчет ССЫЛКА Документ.ПоступлениеДенежныхДокументов ТОГДА
	|			ВЫРАЗИТЬ(ВТПериоды.ПредыдущийОтчет КАК Документ.ПоступлениеДенежныхДокументов).МоментВремени
	//-- НЕ УТ
	|	КОНЕЦ КАК МоментВремениПредыдущийОтчет
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ3
	|ИЗ
	|	ВТПериоды7 КАК ВТПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 8
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (
	|				ТИП(Документ.РасходныйКассовыйОрдер),
	|				ТИП(Документ.ВводОстатков)
	//++ НЕ УТ
	|				, ТИП(Документ.ВыбытиеДенежныхДокументов)
	//-- НЕ УТ
	|				) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличными,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (
	|				ТИП(Документ.РасходныйКассовыйОрдер),
	|				ТИП(Документ.ВводОстатков)
	//++ НЕ УТ
	|				, ТИП(Документ.ВыбытиеДенежныхДокументов)
	//-- НЕ УТ
	|				) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличнымиРегл,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартой,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартойРегл
	|
	|ПОМЕСТИТЬ Выдано
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваВыдано
	|	ПО
	|		((ДенежныеСредстваВыдано.МоментВремени > АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ИЛИ АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ЕСТЬ NULL)
	|			И ДенежныеСредстваВыдано.МоментВремени < АвансовыйОтчетНаПечатьВТ3.МоментВремениТекущийОтчет)
	|		И ДенежныеСредстваВыдано.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваВыдано.Подразделение = АвансовыйОтчетНаПечатьВТ3.Подразделение
	|		И ДенежныеСредстваВыдано.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 9
	|	Израсходовано.Ссылка КАК Ссылка,
	|	Израсходовано.Валюта КАК Валюта,
	|	СУММА(Израсходовано.Сумма) КАК СуммаИзрасходовано,
	|	СУММА(Израсходовано.СуммаРегл) КАК СуммаИзрасходованоРегл
	|ПОМЕСТИТЬ Израсходовано
	|ИЗ (
	|	ВЫБРАТЬ
	|		АвансовыйОтчетНаПечатьВТ3.Ссылка КАК Ссылка,
	|		ДенежныеСредства.Валюта,
	|		ЕСТЬNULL(СУММА(ДенежныеСредства.Сумма), 0) КАК Сумма,
	|		ЕСТЬNULL(СУММА(ДенежныеСредства.СуммаРегл), 0) КАК СуммаРегл
	|	ИЗ
	|		АвансовыйОтчетНаПечатьВТ3
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|		ПО
	|			ДенежныеСредства.Регистратор = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|			И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДенежныеСредства.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	СГРУППИРОВАТЬ ПО
	|		АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|		ДенежныеСредства.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.АвансовыйОтчет КАК Ссылка,
	|		ДенежныеСредства.Валюта,
	|		ДенежныеСредства.СуммаРасход КАК Сумма,
	|		ДенежныеСредства.СуммаРеглРасход КАК СуммаРегл
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Обороты(,, Регистратор) КАК ДенежныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ДенежныеСредства.Регистратор
	|	ГДЕ
	|		ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|		
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.АвансовыйОтчет КАК Ссылка,
	|		ДенежныеСредства.Валюта,
	|		ДенежныеСредства.СуммаРасход КАК Сумма,
	|		ДенежныеСредства.СуммаРеглРасход КАК СуммаРегл
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Обороты(,, Регистратор) КАК ДенежныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ДенежныеСредства.Регистратор
	|	ГДЕ
	|		ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	//-- НЕ УТ
	|	) КАК Израсходовано
	|СГРУППИРОВАТЬ ПО
	|	Израсходовано.Ссылка,
	|	Израсходовано.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 10
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредства.Организация,
	|	ДенежныеСредства.Подразделение,
	|	ДенежныеСредства.ПодотчетноеЛицо,
	|	ДенежныеСредства.Подразделение,
	|	ДенежныеСредства.Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаКонечныйОстаток, 0) > 0 ТОГДА
	|			ДенежныеСредства.СуммаКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаКонечныйОстаток, 0) < 0 ТОГДА
	|			-ДенежныеСредства.СуммаКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйПерерасход,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаРеглКонечныйОстаток, 0) > 0 ТОГДА
	|			ДенежныеСредства.СуммаРеглКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйОстатокРегл,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДенежныеСредства.СуммаРеглКонечныйОстаток, 0) < 0 ТОГДА
	|			-ДенежныеСредства.СуммаРеглКонечныйОстаток
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечныйПерерасходРегл
	|ПОМЕСТИТЬ ТекущийАвансВрем
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,, Регистратор,,
	|			(Организация, Подотчетноелицо, Подразделение) В (ВЫБРАТЬ Организация, Подотчетноелицо, Подразделение ИЗ ВТПериоды1)) КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = АвансовыйОтчетНаПечатьВТ3.Регистратор
	|		И ДенежныеСредства.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредства.Подразделение = АвансовыйОтчетНаПечатьВТ3.Подразделение
	|		И ДенежныеСредства.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 11
	|	ТекущийАвансВрем.Ссылка,
	|	ТекущийАвансВрем.Валюта,
	|	СУММА(ТекущийАвансВрем.КонечныйОстаток),
	|	СУММА(ТекущийАвансВрем.КонечныйПерерасход),
	|	СУММА(ТекущийАвансВрем.КонечныйОстатокРегл),
	|	СУММА(ТекущийАвансВрем.КонечныйПерерасходРегл)
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	ТекущийАвансВрем
	|СГРУППИРОВАТЬ ПО
	|	ТекущийАвансВрем.Ссылка,
	|	ТекущийАвансВрем.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 12
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.Валюта КАК Валюта,
	|	СУММА(ДанныеШапки.СуммаВыданоНаличными)   КАК СуммаВыданоНаличными,
	|	СУММА(ДанныеШапки.СуммаВыданоКартой)      КАК СуммаВыданоКартой,
	|	СУММА(ДанныеШапки.КонечныйОстаток)        КАК КонечныйОстаток,
	|	СУММА(ДанныеШапки.КонечныйПерерасход)     КАК КонечныйПерерасход,
	|	СУММА(ДанныеШапки.СуммаИзрасходовано)     КАК СуммаИзрасходовано,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой) > 0 ТОГДА
	|			СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйОстаток,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой) < 0 ТОГДА
	|			-1 * (СУММА(ДанныеШапки.КонечныйОстаток) - СУММА(ДанныеШапки.КонечныйПерерасход) + СУММА(ДанныеШапки.СуммаИзрасходовано) - СУММА(ДанныеШапки.СуммаВыданоНаличными) - СУММА(ДанныеШапки.СуммаВыданоКартой))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйПерерасход,
	|	СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл)   КАК СуммаВыданоНаличнымиРегл,
	|	СУММА(ДанныеШапки.СуммаВыданоКартойРегл)      КАК СуммаВыданоКартойРегл,
	|	СУММА(ДанныеШапки.КонечныйОстатокРегл)        КАК КонечныйОстатокРегл,
	|	СУММА(ДанныеШапки.КонечныйПерерасходРегл)     КАК КонечныйПерерасходРегл,
	|	СУММА(ДанныеШапки.СуммаИзрасходованоРегл)     КАК СуммаИзрасходованоРегл,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл) > 0 ТОГДА
	|			СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйОстатокРегл,
	|	ВЫБОР
	|		КОГДА СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл) < 0 ТОГДА
	|			-1 * (СУММА(ДанныеШапки.КонечныйОстатокРегл) - СУММА(ДанныеШапки.КонечныйПерерасходРегл) + СУММА(ДанныеШапки.СуммаИзрасходованоРегл) - СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) - СУММА(ДанныеШапки.СуммаВыданоКартойРегл))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальныйПерерасходРегл
	|ИЗ
	|(ВЫБРАТЬ
	|	Выдано.Ссылка КАК Ссылка,
	|	Выдано.Валюта КАК Валюта,
	|	Выдано.СуммаВыданоНаличными     КАК СуммаВыданоНаличными,
	|	Выдано.СуммаВыданоКартой        КАК СуммаВыданоКартой,
	|	0                               КАК КонечныйОстаток,
	|	0                               КАК КонечныйПерерасход,
	|	0                               КАК СуммаИзрасходовано,
	|	Выдано.СуммаВыданоНаличнымиРегл КАК СуммаВыданоНаличнымиРегл,
	|	Выдано.СуммаВыданоКартойРегл    КАК СуммаВыданоКартойРегл,
	|	0                               КАК КонечныйОстатокРегл,
	|	0                               КАК КонечныйПерерасходРегл,
	|	0                               КАК СуммаИзрасходованоРегл
	|ИЗ
	|	Выдано
	|ГДЕ
	|	Выдано.СуммаВыданоНаличными <> 0 ИЛИ Выдано.СуммаВыданоКартой <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки.Ссылка,
	|	Остатки.Валюта,
	|	0,
	|	0,
	|	Остатки.КонечныйОстаток,
	|	Остатки.КонечныйПерерасход,
	|	0,
	|	0,
	|	0,
	|	Остатки.КонечныйОстатокРегл,
	|	Остатки.КонечныйПерерасходРегл,
	|	0
	|ИЗ
	|	Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Израсходовано.Ссылка КАК Ссылка,
	|	Израсходовано.Валюта КАК Валюта,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Израсходовано.СуммаИзрасходовано,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Израсходовано.СуммаИзрасходованоРегл
	|ИЗ
	|	Израсходовано) КАК ДанныеШапки
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШапки.Ссылка,
	|	ДанныеШапки.Валюта
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 13
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ПодотчетноеЛицо) КАК ПредставлениеПодотчетногоЛица,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.НазначениеАванса КАК НазначениеАванса,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Подразделение) КАК ПредставлениеПодразделения,
	|	ДанныеДокумента.Подразделение.Код КАК КодПодразделения,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Валюта) КАК ПредставлениеВалютыДокумента,
	|	ДанныеДокумента.Мультивалютный КАК Мультивалютный,
	|	ДанныеДокумента.КоличествоДокументов КАК КоличествоДокументов,
	|	ДанныеДокумента.КоличествоЛистов КАК КоличествоЛистов,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителяПредставление,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 14
	|	ПрочиеРасходы.Ссылка                           КАК Ссылка,
	|	ПрочиеРасходы.Ссылка                           КАК ДокументДвижения,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента   КАК НаименованиеРасхода,
	|	ПрочиеРасходы.НомерВходящегоДокумента          КАК ДокументНомер,
	|	ПрочиеРасходы.ДатаВходящегоДокумента           КАК ДокументДата,
	|	ПрочиеРасходы.СтатьяРасходов                   КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов                КАК АналитикаРасходов,
	|	ПрочиеРасходы.Контрагент                       КАК Контрагент,
	|	NULL                                           КАК КонтрагентОплаты,
	|	ВЫБОР КОГДА ПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ПрочиеРасходы.Ссылка.Валюта
	|	ИНАЧЕ
	|		ПрочиеРасходы.Валюта
	|	КОНЕЦ КАК Валюта,
	|	ПрочиеРасходы.СчетУчета                        КАК СчетУчета,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = &ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчету,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|			ПрочиеРасходы.Сумма
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчетуВВалюте,
	|	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = &ВалютаРегламентированногоУчета ТОГДА
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|	КОНЕЦ КАК ПоОтчету,
	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|		ПрочиеРасходы.Сумма
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоОтчетуВВалюте,
	|	
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, ПрочиеРасходы.СуммаНДС) КАК СуммаНДС,
	|	ПрочиеРасходы.ПервичныйДокумент КАК ПервичныйДокумент,
	
	|	1 КАК НомерРаздела,
	|	ПрочиеРасходы.ИдентификаторСтроки КАК НомерСтроки,
	|	ПрочиеРасходы.НомерСтроки КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
	|	ПО
	|		ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
	|		И ДвиженияПрочиеРасходы.СтатьяДоходовРасходов = ПрочиеРасходы.СтатьяРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаРасходов = ПрочиеРасходы.АналитикаРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаАктивовПассивов = ПрочиеРасходы.АналитикаАктивовПассивов
	|		И ДвиженияПрочиеРасходы.Подразделение = ПрочиеРасходы.Подразделение
	|		И ДвиженияПрочиеРасходы.СуммаВВалюте = ПрочиеРасходы.Сумма
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = ПрочиеРасходы.Ссылка
	|		И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		
	|	
	|ГДЕ
	|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.Ссылка,
	|	"""",
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОплатаПоставщикам.Контрагент,
	|	ВЫБОР КОГДА ОплатаПоставщикам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ОплатаПоставщикам.Ссылка.Валюта
	|	ИНАЧЕ
	|		ОплатаПоставщикам.Валюта
	|	КОНЕЦ КАК Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	
	|	2 КАК НомерРаздела,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|	
	|ГДЕ
	|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДокументПриобретение.АвансовыйОтчет,
	|	ДокументПриобретение.Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НаименованиеВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НаименованиеВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НаименованиеВходящегоДокумента
	|	КОНЕЦ КАК НаименованиеВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НомерВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НомерВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ДокументПриобретение.ДатаВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДокументПриобретение.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ДанныеДокумента.СуммаСНДС),
	|	СУММА(ВЫБОР
	|		КОГДА ДокументПриобретение.АвансовыйОтчет.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДанныеДокумента.СуммаСНДС, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	СУММА(ДанныеДокумента.СуммаСНДС),
	|	СУММА(ВЫБОР
	|		КОГДА ДокументПриобретение.АвансовыйОтчет.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДанныеДокумента.СуммаСНДС, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	
	|	0 КАК НомерРаздела,
	|	МАКСИМУМ(ДанныеДокумента.ИдентификаторСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(ДанныеДокумента.НомерСтроки) КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПриобретение
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг.Товары КАК ДанныеДокумента
	|	ПО
	|		ДокументПриобретение.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументПриобретение.АвансовыйОтчет В (&МассивДокументов)
	|	И ДокументПриобретение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	И ДокументПриобретение.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДокументПриобретение.Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НаименованиеВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НаименованиеВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НаименованиеВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НомерВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НомерВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НомерВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ДокументПриобретение.ДатаВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ
	|
	|	
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка,
	|	"""",
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДенежныеСредства.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.АвансовыйОтчет.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0),
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.АвансовыйОтчет.Валюта <> &ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	
	|	0 КАК НомерРаздела,
	|	ДанныеДокумента.Номер КАК НомерСтроки,
	|	ДанныеДокумента.Номер КАК НомерСтрокиУпорядочивания
	|
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|	
	//-- НЕ УТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела,
	|	НомерСтрокиУпорядочивания
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 15
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ТаблицаКонвертацияВалюты.Валюта КАК ВалютаИсходная,
	|	ТаблицаКонвертацияВалюты.Сумма КАК СуммаИсходная,
	|	ТаблицаКонвертацияВалюты.ВалютаКонвертации КАК ВалютаКонвертации,
	|	ТаблицаКонвертацияВалюты.СуммаКонвертации КАК СуммаКонвертации
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.КонвертацияВалюты КАК ТаблицаКонвертацияВалюты
	|	ПО
	|		ТаблицаКонвертацияВалюты.Ссылка = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
    //Если Не ИспользуетсяРеглУчет Тогда
    //	ТекстЗапроса = ТекстЗапроса + "
    //	|ВЫБРАТЬ РАЗЛИЧНЫЕ // 16
    //	|	ОплатаПоставщикам.Ссылка КАК Регистратор,
    //	|	""60"" КАК СчетДт,
    //	|	ОплатаПоставщикам.Контрагент КАК ЗначениеСубконто,
    //	|	ВЫБОР КОГДА ОплатаПоставщикам.Ссылка.Валюта = &ВалютаРегламентированногоУчета ТОГДА
    //	|		""71.01""
    //	|	ИНАЧЕ
    //	|		""71.21""
    //	|	КОНЕЦ КАК СчетКт,
    //	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
    //	|	ОплатаПоставщикам.Сумма
    //	|	
    //	|ИЗ
    //	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
    //	|ГДЕ
    //	|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
    //	|
    //	|ОБЪЕДИНИТЬ ВСЕ
    //	|
    //	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    //	|	ПрочиеРасходы.Ссылка КАК Регистратор,
    //	|	ПрочиеРасходы.СтатьяРасходов.КорреспондирующийСчет,
    //	|	ПрочиеРасходы.СтатьяРасходов КАК ЗначениеСубконто,
    //	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = &ВалютаРегламентированногоУчета ТОГДА
    //	|		""71.01""
    //	|	ИНАЧЕ
    //	|		""71.21""
    //	|	КОНЕЦ КАК СчетКт,
    //	|	ПрочиеРасходы.НомерСтроки КАК НомерСтроки,
    //	
    //	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
    //	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = &ВалютаРегламентированногоУчета ТОГДА
    //	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
    //	|		ИНАЧЕ
    //	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
    //	|		КОНЕЦ
    //	|	ИНАЧЕ
    //	|		0
    //	|	КОНЕЦ
    //	|	
    //	|ИЗ
    //	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
    //	|		ЛЕВОЕ СОЕДИНЕНИЕ
    //	|			РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
    //	|		ПО
    //	|			ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
    //	|			И ДвиженияПрочиеРасходы.НомерСтроки = ПрочиеРасходы.НомерСтроки
    //	|		ЛЕВОЕ СОЕДИНЕНИЕ
    //	|			РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
    //	|		ПО
    //	|			Суммы.Регистратор = ПрочиеРасходы.Ссылка
    //	|			И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
    //	|			И Суммы.СуммаБезНДСРегл <> 0
    //	|ГДЕ
    //	|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
    //	|
    //	|ОБЪЕДИНИТЬ ВСЕ
    //	|
    //	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    //	|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет КАК Регистратор,
    //	|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
    //	|		""41""
    //	|	ИНАЧЕ
    //	|		""91.02""
    //	|	КОНЕЦ КАК СчетДт,
    //	|	НЕОПРЕДЕЛЕНО,
    //	|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = &ВалютаРегламентированногоУчета ТОГДА
    //	|		""71.01""
    //	|	ИНАЧЕ
    //	|		""71.21""
    //	|	КОНЕЦ КАК СчетКт,
    //	|	1 КАК НомерСтроки,
    //	|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА
    //	|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС) - СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС)
    //	|	ИНАЧЕ
    //	|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС)
    //	|	КОНЕЦ КАК Сумма
    //	|ИЗ
    //	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
    //	|ГДЕ
    //	|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет В (&МассивДокументов)
    //	|	
    //	|СГРУППИРОВАТЬ ПО
    //	|	ПриобретениеТоваровУслугТовары.Ссылка,
    //	|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
    //	|		""41""
    //	|	ИНАЧЕ
    //	|		""91.02""
    //	|	КОНЕЦ
    //	|
    //	|ОБЪЕДИНИТЬ ВСЕ
    //	|
    //	|ВЫБРАТЬ
    //	|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет КАК Регистратор,
    //	|	""19"" КАК СчетДт,
    //	|	НЕОПРЕДЕЛЕНО,
    //	|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = &ВалютаРегламентированногоУчета ТОГДА
    //	|		""71.01""
    //	|	ИНАЧЕ
    //	|		""71.21""
    //	|	КОНЕЦ КАК СчетКт,
    //	|	2 КАК НомерСтроки,
    //	|	СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС) КАК Сумма
    //	|ИЗ
    //	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
    //	|ГДЕ
    //	|	ПриобретениеТоваровУслугТовары.Ссылка.АвансовыйОтчет В (&МассивДокументов)
    //	|	И ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
    //	|	
    //	|СГРУППИРОВАТЬ ПО
    //	|	ПриобретениеТоваровУслугТовары.Ссылка
    //	|
    //	|УПОРЯДОЧИТЬ ПО
    //	|	Регистратор,
    //	|	НомерСтроки
    //	|;
    //	|";
    ////++ НЕ УТ
    //Иначе
    //	ТекстЗапроса = ТекстЗапроса + "
    //	|ВЫБРАТЬ // 16
    //	|	ДанныеДокумента.Ссылка КАК Регистратор,
    //	|	ДанныеДокумента.Ссылка КАК ДокументДвижения
    //	|ПОМЕСТИТЬ ДокументыДвижения
    //	|ИЗ
    //	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
    //	|ГДЕ
    //	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
    //	|ОБЪЕДИНИТЬ ВСЕ
    //	|ВЫБРАТЬ
    //	|	ДанныеДокумента.АвансовыйОтчет,
    //	|	ДанныеДокумента.Ссылка
    //	|ИЗ
    //	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
    //	|ГДЕ
    //	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
    //	|ОБЪЕДИНИТЬ ВСЕ
    //	|ВЫБРАТЬ
    //	|	ДанныеДокумента.АвансовыйОтчет,
    //	|	ДанныеДокумента.Ссылка
    //	|ИЗ
    //	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
    //	|ГДЕ
    //	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
    //	|ИНДЕКСИРОВАТЬ ПО
    //	|	ДокументДвижения
    //	|;
    //	|////////////////////////////////////////////////////////////////////////////////
    //	|
    //	|ВЫБРАТЬ // 17
    //	|	ДокументыДвижения.Регистратор КАК Регистратор,
    //	|	ДокументыДвижения.ДокументДвижения КАК ДокументДвижения,
    //	|	Хозрасчетный.Период КАК Период,
    //	|	Хозрасчетный.СчетДт КАК СчетДт,
    //	|	Хозрасчетный.СчетКт КАК СчетКт,
    //	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
    //	|	Хозрасчетный.Сумма КАК Сумма
    //	|ПОМЕСТИТЬ Проводки
    //	|ИЗ
    //	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
    //	|	
    //	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
    //	|		ДокументыДвижения
    //	|	ПО
    //	|		ДокументыДвижения.ДокументДвижения = Хозрасчетный.Регистратор
    //	|	И НЕ Хозрасчетный.СчетДт.Забалансовый
    //	|	И НЕ Хозрасчетный.СчетКт.Забалансовый
    //	|;
    //	|////////////////////////////////////////////////////////////////////////////////
    //	|
    //	|ВЫБРАТЬ // 18
    //	|	Проводки.Регистратор КАК Регистратор,
    //	|	Проводки.ДокументДвижения КАК ДокументДвижения,
    //	|	ВЫБОР КОГДА Проводки.СчетДт В ИЕРАРХИИ(
    //	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
    //	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
    //	|	ТОГДА
    //	|		Проводки.СчетДт.Родитель.Код
    //	|	ИНАЧЕ
    //	|		Проводки.СчетДт.Код
    //	|	КОНЕЦ КАК СчетДт,
    //	|	Проводки.СчетКт.Код КАК СчетКт,
    //	|	МИНИМУМ(Проводки.НомерСтроки) КАК НомерСтроки,
    //	|	СУММА(Проводки.Сумма) КАК Сумма
    //	|ИЗ
    //	|	Проводки КАК Проводки
    //	|
    //	|СГРУППИРОВАТЬ ПО
    //	|	Проводки.Регистратор,
    //	|	Проводки.ДокументДвижения,
    //	|	Проводки.СчетДт,
    //	|	Проводки.СчетКт
    //	|
    //	|УПОРЯДОЧИТЬ ПО
    //	|	Регистратор,
    //	|	НомерСтроки
    //	|;
    //	|
    //	|////////////////////////////////////////////////////////////////////////////////
    //	|ВЫБРАТЬ // 19
    //	|	Проводки.Регистратор КАК Регистратор,
    //	|	Проводки.ДокументДвижения КАК ДокументДвижения,
    //	|	ВЫБОР КОГДА Проводки.СчетДт В ИЕРАРХИИ(
    //	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
    //	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
    //	|	ТОГДА
    //	|		Проводки.СчетДт.Родитель.Код
    //	|	ИНАЧЕ
    //	|		Проводки.СчетДт.Код
    //	|	КОНЕЦ КАК СчетДт,
    //	|	Проводки.Сумма КАК Сумма,
    //	|	Субконто.Значение КАК ЗначениеСубконто
    //	|ИЗ
    //	|	Проводки КАК Проводки
    //	|	
    //	|	ЛЕВОЕ СОЕДИНЕНИЕ
    //	|		ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
    //	|	ПО
    //	|		ВидыСубконто.Ссылка = Проводки.СчетДт
    //	|	
    //	|	ЛЕВОЕ СОЕДИНЕНИЕ
    //	|		РегистрБухгалтерии.Хозрасчетный.Субконто КАК Субконто
    //	|	ПО
    //	|		Субконто.Регистратор = Проводки.Регистратор
    //	|		И Субконто.Период = Проводки.Период
    //	|		И Субконто.НомерСтроки = Проводки.НомерСтроки
    //	|		И Субконто.Вид = ВидыСубконто.ВидСубконто
    //	|		И Субконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
    //	|;
    //	|
    //	|////////////////////////////////////////////////////////////////////////////////
    //	|ВЫБРАТЬ // 20
    //	|	ОтражениеДокументовВРеглУчете.Регистратор КАК Ссылка,
    //	|	ОтражениеДокументовВРеглУчете.Комментарий КАК Комментарий
    //	|ИЗ
    //	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
    //	|ГДЕ
    //	|	ОтражениеДокументовВРеглУчете.Регистратор В (&МассивНеОтраженныхДокументов)
    //	|;";
    ////-- НЕ УТ
    //КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска)
	
	Область = Макет.ПолучитьОбласть("СтрокаТитул|Конвертация");
	ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаКонвертация);
	ТабличныйДокумент.Присоединить(Область);
	Возврат ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
	
КонецФункции


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли