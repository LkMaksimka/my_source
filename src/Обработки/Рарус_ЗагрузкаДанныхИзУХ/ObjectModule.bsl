
Перем мФормаПрогрессора, мУниверсальныйОбменДанными, мСчетчикЗагруженныхОбъектов, мПрефиксОрганизации;
Перем мШаблонКомментария;
Перем мШаблонКомментарияПО;
// rarus kzn maksma 000000242896  {
Перем мРС_НеЗагруженныеДанныеИзУХ;
// rarus kzn maksma 000000242896  }

#Область ПрограммныйИнтерфейс

//Процедура выполняет чтение и загрузку данных из УХ
//
Процедура ЗагрузитьДанныеИзУХ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	мУниверсальныйОбменДанными = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	мУниверсальныйОбменДанными.ДописыватьДанныеВПротоколОбмена					= Истина;
	мУниверсальныйОбменДанными.ВыводВПротоколИнформационныхСообщений			= Истина;
	мУниверсальныйОбменДанными.ВыводВПротоколСообщенийОбОшибках					= Истина;
	мУниверсальныйОбменДанными.Рарус_ДополнительноВестиЗаписьЛоговВРеквизитах	= Истина;
	
	мУниверсальныйОбменДанными.ИнициализироватьВедениеПротоколаОбмена();
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Начало загрузки: " + ТекущаяДатаСеанса(), , Ложь, , ,Истина);	
	
	#Если Клиент Тогда	
		мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		мФормаПрогрессора.НаименованиеОбработкиДанных	= "Загрузка данных из УХ";
		мФормаПрогрессора.КомментарийОбработкиДанных	= "Организация: "+ Организация;
		мФормаПрогрессора.Открыть();	
	#КонецЕсли
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= 1;
		мФормаПрогрессора.КомментарийЗначения	= "Установление соединения...";
	#КонецЕсли
	
	//Установим соединение с веб сервисом УХ
	Сервис = УстановитьСоединениеСУХ();
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= 1;
		мФормаПрогрессора.КомментарийЗначения	= "Получение данных...";
	#КонецЕсли
	
	мПрефиксОрганизации = Организация.Префикс;
	
	// rarus kzn maksma 000000242896  { Попытка загрузить ранее не загруженые данные
	ЗагрузкаНеОбработанныхДанных(Сервис.ФабрикаXDTO);
	Ответ = Неопределено;
	ОчиститьОбработанныеДанныеРС();
	// rarus kzn maksma 000000242896  }
	
	//Получим данные по выбранной организации
	//Ответ = Сервис.GetData(мПрефиксОрганизации);
	
	
	
	Если Ответ = Неопределено Тогда
		Сообщить("Не удалось установить соединение с базой УХ");
		Возврат;
	КонецЕсли;
	
	ТЧДокументы.Очистить();
	РасшифровкаПлатежа.Очистить();
	ПолученныеДоговоры.Очистить();
	
	Отказ = Ложь;
	
	//НачатьТранзакцию();
	
	мСчетчикЗагруженныхОбъектов = 0;
	
	//Загрузка контрагентов
	ЗагрузитьКонтрагентов(Ответ.Контрагенты.Строки, Сервис.ФабрикаXDTO);
	
	//Загрузка банковских счетов
	ЗагрузитьБанковскиеСчета(Ответ.БанковскиеСчета.Строки, Сервис.ФабрикаXDTO);	
	
	//Создание банковских счетов
	СоздатьБанковскиеСчета(Отказ);
	
	//Загрузка договоров контрагентов
	ЗагрузитьДоговорыКонтрагентов(Ответ.ДоговорыКонтрагентов.Строки, Сервис.ФабрикаXDTO);
		
	//Создание договоров контрагентов
	СоздатьДоговоры(Отказ);
		
	//Загрузка документов Поступление на расчетный счет
	ЗагрузитьДокументы(Ответ.ПоступленияНаРасчетныйСчет.Строки, "ПоступлениеНаРасчетныйСчет", "Поступление на расчетный счет", Отказ ,Сервис.ФабрикаXDTO);
			
	//Загрузка документов Списание с расчетного счета
	ЗагрузитьДокументы(Ответ.СписанияСРасчетногоСчета.Строки, "СписаниеСРасчетногоСчета", "Списание с расчетного счета", Отказ, Сервис.ФабрикаXDTO);	
		
	//Создание документов
	СоздатьДокументы(Отказ);
	
	//Если ТранзакцияАктивна() Тогда
		Если Отказ Тогда
			//ОтменитьТранзакцию();
			
			мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Загружено объектов: " + 0, , Истина, , , Истина);
		Иначе			
			//ЗафиксироватьТранзакцию();
			
			мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Загружено объектов: " + мСчетчикЗагруженныхОбъектов, , Ложь, , , Истина);
			
			Если ПДО_Сервер.ЭтоРабочаяБаза() Тогда 
				Сервис.Response(Ответ.НомерОтправленногоСообщения, мПрефиксОрганизации);
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Окончание загрузки: " + ТекущаяДатаСеанса(), , Ложь, , ,Истина);	
	мУниверсальныйОбменДанными.ЗавершитьВедениеПротоколаОбмена();
	
	мТекДата = ТекущаяДата();
	
	ВхСтруктура = Новый Структура("Период,УзелОбмена,Лог,ИмяЛога,ДатаОбмена",
			мТекДата,,мУниверсальныйОбменДанными.Рарус_ЛогОбменаУОД,Строка(мТекДата)+"_УХ_ЗагрузкаДанных_"+Организация,мТекДата);
			
	ПДО_Сервер.ЗаписьЛогаВИБ(ВхСтруктура);
	
	#Если Клиент Тогда
		мФормаПрогрессора.Закрыть();
	#КонецЕсли
	
	ОчиститьОбработанныеДанныеРС();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСсылкуНаДокументПоУИДу(ВидДокументаУХ, ВидОперацииУХ, КодДокумента, СозданНаОснованииПлатежногоПоручения, ВходящийНомерЗаполнен, НомерСтроки)
	
	ЗначениеДокумента = Неопределено;
	
	Если Не ЗначениеЗаполнено(КодДокумента) Тогда
		Возврат ЗначениеДокумента;	
	КонецЕсли;
	
	УИД = Новый УникальныйИдентификатор(КодДокумента);
	
	ВидДокумента = ПолучитьВидДокументаУПП(ВидДокументаУХ, ВидОперацииУХ, СозданНаОснованииПлатежногоПоручения, ВходящийНомерЗаполнен, НомерСтроки);
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ЗначениеДокумента = Документы[ВидДокумента].ПолучитьСсылку(УИД);
		
		Если ЗначениеДокумента.ПолучитьОбъект() = Неопределено Тогда
			ЗначениеДокумента = Неопределено;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеДокумента;
	
КонецФункции

Функция ПолучитьВидДокументаУПП(ВидДокументаУХ, ВидОперацииУХ, СозданНаОснованииПлатежногоПоручения, ВходящийНомерЗаполнен, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(ВидДокументаУХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен вид документа (Вид документа) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Неопределено;	
	КонецЕсли;
	
	ВидДокументаУПП = "";
	
	Если ВидДокументаУХ = "ПоступлениеНаРасчетныйСчет" Тогда
		
		Если ВидОперацииУХ = "ОплатаПокупателя" 
			ИЛИ ВидОперацииУХ = "ВозвратОтПоставщика"
			ИЛИ ВидОперацииУХ = "ПолучениеЗайма"
			ИЛИ ВидОперацииУХ = "ПолучениеКредита"
			ИЛИ ВидОперацииУХ = "ВозвратЗаймаКонтрагентом"
			ИЛИ ВидОперацииУХ = "ПрочиеРасчетыСКонтрагентами"
			ИЛИ ВидОперацииУХ = "ОплатаОтФакторинговойКомпании"
			ИЛИ ВидОперацииУХ = "ПоступлениеОплатыПоПлатежнымКартам"
			ИЛИ ВидОперацииУХ = "ВозвратЗаймаРаботником"
			ИЛИ ВидОперацииУХ = "ПереводСДругогоСчета"
			ИЛИ ВидОперацииУХ = "Инкассация"
			ИЛИ (ВидОперацииУХ = "ПрочееПоступление" 
			И ВходящийНомерЗаполнен) Тогда
			
			ВидДокументаУПП = "ПлатежноеПоручениеВходящее";
			
		ИначеЕсли ВидОперацииУХ = "ПриобретениеИностраннойВалюты"
			ИЛИ ВидОперацииУХ = "ПоступленияОтПродажиИностраннойВалюты"
			ИЛИ (ВидОперацииУХ = "ПрочееПоступление" 
			И Не ВходящийНомерЗаполнен) Тогда
			
			ВидДокументаУПП = "ПлатежныйОрдерПоступлениеДенежныхСредств";
			
		КонецЕсли;
		
	ИначеЕсли ВидДокументаУХ = "СписаниеСРасчетногоСчета" Тогда
		
		Если СозданНаОснованииПлатежногоПоручения Тогда
			ВидДокументаУПП = "ПлатежноеПоручениеИсходящее";	
		Иначе
			ВидДокументаУПП = "ПлатежныйОрдерСписаниеДенежныхСредств";	
		КонецЕсли;
		
	КонецЕсли;
		
	ЗнчНайдено = ЗначениеЗаполнено(ВидДокументаУПП);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+ВидДокументаУХ+"(Вид документа) - "+?(ЗнчНайдено,ВидДокументаУПП,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат ВидДокументаУПП;
	
КонецФункции

Функция ОповеститьОНаличииЗагруженных()
	
	Для Каждого СтрокаТЧ Из ТЧДокументы Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументСсылка)
			И Не СтрокаТЧ.ДокументСсылка.Проведен Тогда
			
			Ответ = КодВозвратаДиалога.Да; 	
			Текст = "Некоторые документы из табличной части уже были загружены, хотите ли вы загрузить их заново? Повторная загрузка может привести к потере данных.";
			Режим = РежимДиалогаВопрос.ДаНет;
			
			Ответ = Вопрос(Текст, Режим, 0, КодВозвратаДиалога.Нет);				
			Возврат ?(Ответ = КодВозвратаДиалога.Да, Истина, Ложь);
			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СоздатьПолучитьДокумент(ВидДокумента, ГУИДСтрока, Дата, СуществующаяСсылка = Неопределено) 
	
	Если Не ЗначениеЗаполнено(СуществующаяСсылка) Тогда	
		ГУИД = Новый УникальныйИдентификатор(ГУИДСтрока);		
		СсылкаНового = Документы[ВидДокумента].ПолучитьСсылку(ГУИД);	
		
		ДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();					
		ДокументОбъект.УстановитьСсылкуНового(СсылкаНового);
		
		Если ВидДокумента <> "ПлатежноеПоручениеИсходящее" Тогда
			ДокументОбъект.Организация	= Организация;
			ДокументОбъект.Дата			= Дата;
			ДокументОбъект.УстановитьНовыйНомер(мПрефиксОрганизации);	
		КонецЕсли;
	Иначе
		ДокументОбъект = СуществующаяСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

Процедура ЗаполнитьППВходящее(Стр, Док)
		
	Док.Дата							= Дата(Год(Стр.ДатаДокумента),Месяц(Стр.ДатаДокумента),ДЕНЬ(Стр.ДатаДокумента),00,00,00)+Стр.НомерСтроки;
	Док.ДатаОплаты						= Док.Дата;
	Док.Оплачено						= Истина;
	Док.ОтражатьВНалоговомУчете			= Истина;
	Док.ОтражатьВБухгалтерскомУчете		= Истина;
	Док.ОтраженоВОперУчете				= Истина;	
	Док.СтатусДокумента					= Перечисления.СтатусыПлатежныхДокументов.Загружен;		
	Док.Ответственный					= глЗначениеПеременной("глТекущийПользователь");	
	Док.ДатаВходящегоДокумента			= Стр.ДатаВходящего;
	Док.НомерВходящегоДокумента			= Стр.НомерВходящего;	
	Док.СуммаДокумента					= Стр.СуммаДокумента;
	Док.ВидОперации						= ПолучитьВидОперацииУПП(Стр.ВидДокументаУХ, Стр.ВидОперацииУХ, ТипЗнч(Док), Стр.НомерСтроки);
	Док.НазначениеПлатежа				= Стр.НазначениеПлатежа;
	Док.Организация						= Организация;
	Док.ВалютаДокумента					= Стр.ВалютаДокумента;
	Док.Контрагент						= Стр.Контрагент;
	Док.СчетКонтрагента					= Стр.СчетКонтрагента;
	Док.СчетОрганизации					= Стр.СчетОрганизации;
	Док.Комментарий						= СтрШаблон(мШаблонКомментария, Стр.НомерДокумента, Стр.ДатаДокумента);
	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.ВалютаДокумента, Стр.ДатаДокумента);
	
	Док.РасшифровкаПлатежа.Очистить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("КлючСвязи", Стр.КлючСвязи);
	
	НайденныеСтроки = РасшифровкаПлатежа.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Если Строка.Договор.ВалютаВзаиморасчетов <> Стр.ВалютаДокумента Тогда
			СтруктураКурсаПоДоговору			= МодульВалютногоУчета.ПолучитьКурсВалюты(Строка.Договор.ВалютаВзаиморасчетов,Стр.ДатаДокумента);
			КурсВзаиморасчетовПоДоговору		= СтруктураКурсаПоДоговору.Курс;
			КратностьВзаиморасчетовПоДоговору	= СтруктураКурсаПоДоговору.Кратность;			
		Иначе
			СтруктураКурсаПоДоговору			= СтруктураКурса;
			КурсВзаиморасчетовПоДоговору		= СтруктураКурса.Курс;
			КратностьВзаиморасчетовПоДоговору	= СтруктураКурса.Кратность;
		КонецЕсли;
		
		СтрРасшифровка = Док.РасшифровкаПлатежа.Добавить();
		СтрРасшифровка.ДоговорКонтрагента		= Строка.Договор;		
		СтрРасшифровка.КурсВзаиморасчетов		= КурсВзаиморасчетовПоДоговору;
		СтрРасшифровка.КратностьВзаиморасчетов	= КратностьВзаиморасчетовПоДоговору;
		СтрРасшифровка.СуммаПлатежа				= Строка.Сумма;
		
		Если ЗначениеЗаполнено(Строка.Договор) Тогда
			
			СтрРасшифровка.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Строка.Сумма, 
			Стр.ВалютаДокумента, Строка.Договор.ВалютаВзаиморасчетов,
			СтруктураКурса.Курс, КурсВзаиморасчетовПоДоговору,
			СтруктураКурса.Кратность, КратностьВзаиморасчетовПоДоговору);
			
		КонецЕсли;
		
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		
		СтрРасшифровка.СтавкаНДС						= Строка.СтавкаНДС;		
		СтрРасшифровка.СуммаНДС							= СтрРасшифровка.СуммаПлатежа*ЗначениеСтавкиНДС/(100 + ЗначениеСтавкиНДС);
		СтрРасшифровка.СтатьяДвиженияДенежныхСредств	= Строка.Статья; 
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(Док,глЗначениеПеременной("глТекущийПользователь"),Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьППИсходящее(Стр, Док)
	
	Док.Номер						= ПолучитьНомерДокумента(Стр.НомерВходящего, 11, мПрефиксОрганизации);
	Док.ОчередностьПлатежа			= 6;	
	Док.Оплачено					= Истина;
	Док.Дата						= Дата(Год(Стр.ДатаВходящего),Месяц(Стр.ДатаВходящего),ДЕНЬ(Стр.ДатаВходящего),00,00,00) + Стр.НомерСтроки;
	Док.ДатаОплаты					= Док.Дата;
	Док.ОтражатьВНалоговомУчете		= Истина;
	Док.ОтражатьВБухгалтерскомУчете	= Истина;
	Док.ОтраженоВОперУчете			= Истина;	
	Док.СтатусДокумента				= Перечисления.СтатусыПлатежныхДокументов.Загружен;		
	Док.Ответственный				= глЗначениеПеременной("глТекущийПользователь");
	Док.СуммаДокумента				= Стр.СуммаДокумента;
	Док.ВидОперации					= ПолучитьВидОперацииУПП(Стр.ВидДокументаУХ, Стр.ВидОперацииУХ, ТипЗнч(Док), Стр.НомерСтроки);
	Док.НазначениеПлатежа			= Стр.НазначениеПлатежа;
	Док.Организация					= Организация;
	Док.ВалютаДокумента				= Стр.ВалютаДокумента;
	Док.Контрагент					= Стр.Контрагент;
	Док.СчетКонтрагента				= Стр.СчетКонтрагента;
	Док.СчетОрганизации				= Стр.СчетОрганизации;
	док.ТекстПлательщика			= Стр.СчетОрганизации.ТекстКорреспондента;
	док.ТекстПолучателя				= Стр.СчетКонтрагента.ТекстКорреспондента;
	Док.ИННПолучателя				= Стр.Контрагент.ИНН;
	Док.КПППолучателя				= Стр.Контрагент.КПП;
	Док.ИННПлательщика				= Организация.ИНН;
	Док.КПППлательщика				= Организация.КПП;
	Док.Комментарий					= СтрШаблон(мШаблонКомментария, Стр.НомерВходящего, Стр.ДатаВходящего, Стр.НомерДокумента, Стр.ДатаДокумента);	
	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.ВалютаДокумента,Стр.ДатаДокумента);
	
	Док.РасшифровкаПлатежа.Очистить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("КлючСвязи", Стр.КлючСвязи);
	
	НайденныеСтроки = РасшифровкаПлатежа.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		СтрРасшифровка = Док.РасшифровкаПлатежа.Добавить();		
		СтрРасшифровка.ДоговорКонтрагента = Строка.Договор;
		
		Если Строка.Договор.ВалютаВзаиморасчетов <> Стр.ВалютаДокумента Тогда
			СтруктураКурсаПоДоговору			= МодульВалютногоУчета.ПолучитьКурсВалюты(Строка.Договор.ВалютаВзаиморасчетов,Стр.ДатаДокумента);
			КурсВзаиморасчетовПоДоговору		= СтруктураКурсаПоДоговору.Курс;
			КратностьВзаиморасчетовПоДоговору	= СтруктураКурсаПоДоговору.Кратность;				
		Иначе
			СтруктураКурсаПоДоговору			= СтруктураКурса;
			КурсВзаиморасчетовПоДоговору		= СтруктураКурса.Курс;
			КратностьВзаиморасчетовПоДоговору	= СтруктураКурса.Кратность;
		КонецЕсли;
		
		СтрРасшифровка.КурсВзаиморасчетов		= КурсВзаиморасчетовПоДоговору;
		СтрРасшифровка.КратностьВзаиморасчетов	= КратностьВзаиморасчетовПоДоговору;
		СтрРасшифровка.СуммаПлатежа				= Строка.Сумма;
		
		Если ЗначениеЗаполнено(Строка.Договор) Тогда
			
			СтрРасшифровка.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Строка.Сумма, 
			Стр.ВалютаДокумента, Строка.Договор.ВалютаВзаиморасчетов,
			СтруктураКурса.Курс, КурсВзаиморасчетовПоДоговору,
			СтруктураКурса.Кратность, КратностьВзаиморасчетовПоДоговору);
			
		КонецЕсли;
		
		ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС);
		
		СтрРасшифровка.СтавкаНДС						= Строка.СтавкаНДС;			
		СтрРасшифровка.СуммаНДС							= СтрРасшифровка.СуммаПлатежа * ЗначениеСтавкиНДС /(100 + ЗначениеСтавкиНДС);
		СтрРасшифровка.СтатьяДвиженияДенежныхСредств	= Строка.Статья; 
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(Док,глЗначениеПеременной("глТекущийПользователь"),Истина);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПОВходящий(Стр, Док)
	
	Док.Дата						= Дата(Год(Стр.ДатаДокумента),Месяц(Стр.ДатаДокумента),ДЕНЬ(Стр.ДатаДокумента),00,00,00)+Стр.НомерСтроки;
	Док.ДатаОплаты					= Док.Дата;  
	Док.ДатаВходящегоДокумента		= Стр.ДатаВходящего;
	Док.НомерВходящегоДокумента		= Стр.НомерВходящего;	
	Док.СуммаДокумента				= Стр.СуммаДокумента;
	Док.ВидОперации					= ПолучитьВидОперацииУПП(Стр.ВидДокументаУХ, Стр.ВидОперацииУХ, ТипЗнч(Док), Стр.НомерСтроки);
	Док.НазначениеПлатежа			= Стр.НазначениеПлатежа;
	Док.Организация					= Организация;  
	Док.СтатусДокумента				= Перечисления.СтатусыПлатежныхДокументов.Загружен;		
	Док.СчетОрганизации				= Стр.СчетОрганизации;	
	Док.ВалютаДокумента				= Стр.СчетОрганизации.ВалютаДенежныхСредств;
	Док.Контрагент					= Стр.Контрагент;
	Док.СчетКонтрагента				= Стр.СчетКонтрагента;
	Док.ОтражатьВБухгалтерскомУчете	= Истина;
	Док.ОтражатьВНалоговомУчете		= Истина;
	Док.ОтраженоВОперУчете			= Истина;
	Док.Ответственный				= глЗначениеПеременной("глТекущийПользователь");
	Док.Комментарий					= СтрШаблон(мШаблонКомментарияПО, Стр.НазначениеПлатежа, Стр.НомерДокумента, Стр.ДатаДокумента);	
	
	СтруктураКурса=МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.СчетОрганизации.ВалютаДенежныхСредств, Стр.ДатаДокумента);
	
	Док.РасшифровкаПлатежа.Очистить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("КлючСвязи", Стр.КлючСвязи);
	
	НайденныеСтроки = РасшифровкаПлатежа.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		СтрРасшифровка = Док.РасшифровкаПлатежа.Добавить();
		СтрРасшифровка.ДоговорКонтрагента				= Строка.Договор;
		СтрРасшифровка.КурсВзаиморасчетов				= СтруктураКурса.Курс;
		СтрРасшифровка.КратностьВзаиморасчетов			= СтруктураКурса.Кратность;
		СтрРасшифровка.СтатьяДвиженияДенежныхСредств	= Строка.Статья;
		СтрРасшифровка.СуммаВзаиморасчетов				= Строка.Сумма;
		СтрРасшифровка.СуммаПлатежа						= Строка.Сумма;		
		СтрРасшифровка.СтавкаНДС 						= Строка.СтавкаНДС;
		ЗначениеСтавкиНДС     							= УчетНДС.ПолучитьСтавкуНДС(СтрРасшифровка.СтавкаНДС);
		СтрРасшифровка.СуммаНДС 						= СтрРасшифровка.СуммаПлатежа*ЗначениеСтавкиНДС/(100 + ЗначениеСтавкиНДС);
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(Док,глЗначениеПеременной("глТекущийПользователь"),Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПОИсходящий(Стр, Док)
	
	Док.Оплачено						= Истина;
	Док.ОтражатьВБухгалтерскомУчете		= Истина;
	Док.ОтражатьВНалоговомУчете			= Истина;
	Док.ОтраженоВОперУчете				= Истина;
	Док.Дата							= Дата(Год(Стр.ДатаВходящего),Месяц(Стр.ДатаВходящего),ДЕНЬ(Стр.ДатаВходящего),00,00,00)+Стр.НомерСтроки;
	Док.ДатаОплаты						= Док.Дата;
	Док.ВидОперации						= ПолучитьВидОперацииУПП(Стр.ВидДокументаУХ, Стр.ВидОперацииУХ, ТипЗнч(Док), Стр.НомерСтроки);
	Док.Организация						= Организация;  
	Док.СтатусДокумента					= Перечисления.СтатусыПлатежныхДокументов.Загружен;	
	Док.СчетОрганизации					= Стр.СчетОрганизации;
	Док.Контрагент						= Стр.Контрагент;
	Док.СчетКонтрагента					= Стр.СчетКонтрагента;
	Док.СуммаДокумента					= Стр.СуммаДокумента;
	Док.ВалютаДокумента					= Стр.СчетОрганизации.ВалютаДенежныхСредств;	
	Док.Комментарий						= СтрШаблон(мШаблонКомментарияПО, Стр.НазначениеПлатежа, Стр.НомерВходящего, Стр.ДатаВходящего);	
	Док.Ответственный					= глЗначениеПеременной("глТекущийПользователь");
	
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.СчетОрганизации.ВалютаДенежныхСредств, Стр.ДатаДокумента);
	
	Док.РасшифровкаПлатежа.Очистить();
	
	Отбор = Новый Структура();
	Отбор.Вставить("КлючСвязи", Стр.КлючСвязи);
	
	НайденныеСтроки = РасшифровкаПлатежа.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		СтрРасшифровка = Док.РасшифровкаПлатежа.Добавить();
		СтрРасшифровка.ДоговорКонтрагента				= Строка.Договор;
		СтрРасшифровка.СтатьяДвиженияДенежныхСредств	= Строка.Статья;
		СтрРасшифровка.КурсВзаиморасчетов				= СтруктураКурса.Курс;
		СтрРасшифровка.КратностьВзаиморасчетов			= СтруктураКурса.Кратность;
		СтрРасшифровка.СуммаВзаиморасчетов				= Строка.Сумма;
		СтрРасшифровка.СуммаПлатежа						= Строка.Сумма;		
		СтрРасшифровка.СтавкаНДС						= Строка.СтавкаНДС;
		ЗначениеСтавкиНДС								= УчетНДС.ПолучитьСтавкуНДС(СтрРасшифровка.СтавкаНДС);
		СтрРасшифровка.СуммаНДС							= СтрРасшифровка.СуммаПлатежа*ЗначениеСтавкиНДС/(100 + ЗначениеСтавкиНДС);
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(Док, глЗначениеПеременной("глТекущийПользователь"),Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьНовыйДоговор(СтрокаДоговор)
	
	Родитель = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(СтрокаДоговор.Родитель);
	
	НовЭлемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовЭлемент.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДоговор.ГУИДДоговора)));
	НовЭлемент.Организация							= Организация;
	НовЭлемент.Наименование							= СтрокаДоговор.Наименование;
	НовЭлемент.Родитель								= Родитель;
	НовЭлемент.Владелец								= СтрокаДоговор.Контрагент;	
	НовЭлемент.Номер								= СтрокаДоговор.НомерДоговора; 	
	НовЭлемент.ВедениеВзаиморасчетов				= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;	
	НовЭлемент.ВалютаВзаиморасчетов					= СтрокаДоговор.ВалютаВзаиморасчетов;
	НовЭлемент.Дата									= СтрокаДоговор.ДатаДоговора;
	НовЭлемент.СрокДействия							= СтрокаДоговор.СрокДействия;					
	НовЭлемент.СуммаДоговора						= СтрокаДоговор.СуммаДоговора;
	НовЭлемент.НомерДоговораДПО						= СтрокаДоговор.НомерДоговора;
	НовЭлемент.Отсрочка								= СтрокаДоговор.Отсрочка;
	НовЭлемент.ПроцентПредоплаты					= СтрокаДоговор.ПроцентПредоплат;
	НовЭлемент.ДатаНачала							= ?(СтрокаДоговор.ДатаНачала > '19000101',		СтрокаДоговор.ДатаНачала, Неопределено);
	НовЭлемент.ДатаПредДо							= ?(СтрокаДоговор.ОплатаДо > '19000101',		СтрокаДоговор.ОплатаДо, Неопределено);
	НовЭлемент.ДатаНачалаПериодаОплат				= ?(СтрокаДоговор.НачалоОплат > '19000101', 	СтрокаДоговор.НачалоОплат, Неопределено);
	НовЭлемент.ДатаОкончанияПериодаОплат			= ?(СтрокаДоговор.ОкончаниеОплат > '19000101',	СтрокаДоговор.ОкончаниеОплат	, Неопределено);
	НовЭлемент.ОплатаВПериод						= ЗначениеЗаполнено(НовЭлемент.ДатаНачалаПериодаОплат) ИЛИ ЗначениеЗаполнено(НовЭлемент.ДатаОкончанияПериодаОплат);
	НовЭлемент.БанковскийСчет						= ПолучитьБанковскийСчет(НовЭлемент.Владелец, СтрокаДоговор.БанковскийСчет, СтрокаДоговор.Контрагент, СтрокаДоговор.НомерСтроки, НовЭлемент.ВалютаВзаиморасчетов);
	
	Если СокрЛП(СтрокаДоговор.ВидДоговора) = "С покупателем" тогда
		НовЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ИначеЕсли СокрЛП(СтрокаДоговор.ВидДоговора) = "С поставщиком" тогда
		НовЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ИначеЕсли СокрЛП(СтрокаДоговор.ВидДоговора) = "Прочее" тогда	
		НовЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	Иначе
		Если СтрокаДоговор.Контрагент.Покупатель Тогда
			НовЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;	
		ИначеЕсли СтрокаДоговор.Контрагент.Поставщик Тогда
			НовЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		Иначе
			НовЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
	КонецЕсли;	
			
	НовЭлемент.ДополнительныеСвойства.Вставить("ПрограммноеЗаполнение",  Истина);
	
	Возврат НовЭлемент;
	
КонецФункции

Функция ПолучитьКонтрагента(Контрагент_УХ, НомерСтроки)
		
	Если Не ЗначениеЗаполнено(Контрагент_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен код SAP (Контрагент) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Справочники.Контрагенты.ПустаяСсылка();	
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("КодSAP", Контрагент_УХ);
		   
	ЗнчНайдено = ЗначениеЗаполнено(Контрагент);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+Контрагент_УХ+"(Контрагент) - "+?(ЗнчНайдено,Контрагент,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат Контрагент;
	
КонецФункции

Функция ПолучитьКонтрагентаПоИННКПП(ИНН, КПП, НомерСтроки, КонтрагентУХ)
		
	Если Не ЗначениеЗаполнено(ИНН) ИЛИ Не ЗначениеЗаполнено(КПП) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен код ИНН или КПП (Контрагент) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Справочники.Контрагенты.ПустаяСсылка();	
	КонецЕсли;


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК КоличествоКонтарагентов
		|ПОМЕСТИТЬ ВТ_Контарагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ВТ_Контарагент.ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контарагент КАК ВТ_Контарагент
		|		ПО Контрагенты.ИНН = ВТ_Контарагент.ИНН
		|			И Контрагенты.КПП = ВТ_Контарагент.КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Контрагент = Выборка.Контрагент;
		Если ПустаяСтрока(Контрагент.КодSAP) Тогда
			КонтрагентОбъект  = Контрагент.ПолучитьОбъект(); 
			КонтрагентОбъект.КодSAP = КонтрагентУХ;
			КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
			КонтрагентОбъект.Записать();
			Контрагент = КонтрагентОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
		   
	ЗнчНайдено = НЕ Контрагент.Пустая();
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+ИНН+"\"+КПП+"(Контрагент) - "+?(ЗнчНайдено,Контрагент,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат Контрагент;
	
КонецФункции


Функция ПолучитьБанк(БИК_УХ, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(БИК_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен БИК (Банк) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Неопределено;	
	КонецЕсли;
	
	Банк = Справочники.Банки.НайтиПоКоду(БИК_УХ);
	
	ЗнчНайдено = ЗначениеЗаполнено(Банк);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+БИК_УХ+"(Банк) - "+?(ЗнчНайдено,Банк,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат Банк;
	
КонецФункции

Функция ПолучитьБанковскийСчет(Счет_УХ, БИК_УХ, Владелец, НомерСтроки, Валюта, ВыводитьОшибку = Истина)
	
	Если Не ЗначениеЗаполнено(Счет_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен номер счета (Банковский счет) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Банк.Код = &БИК
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта";
	
	Запрос.УстановитьПараметр("Владелец",	Владелец);
	Запрос.УстановитьПараметр("НомерСчета",	Счет_УХ);
	Запрос.УстановитьПараметр("БИК",		БИК_УХ);
	Запрос.УстановитьПараметр("Валюта",		Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		БанковскийСчет = Выборка.Ссылка;
	КонецЕсли;
	
	ЗнчНайдено = ЗначениеЗаполнено(БанковскийСчет);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+Счет_УХ+"(Банковский счет) - "+?(ЗнчНайдено,БанковскийСчет,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено ИЛИ Не ВыводитьОшибку,Ложь,Истина), 
															3);
	
	Возврат БанковскийСчет;
	
КонецФункции

Функция ПолучитьВалюту(Валюта_УХ, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(Валюта_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен код валюты (Валюта) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Неопределено;	
	КонецЕсли;
	
	Валюта = Справочники.Валюты.НайтиПоКоду(Валюта_УХ);
	
	ЗнчНайдено = ЗначениеЗаполнено(Валюта);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+Валюта_УХ+"(Валюта) - "+?(ЗнчНайдено,Валюта,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат Валюта;
	
КонецФункции

Функция ПолучитьДоговорКонтрагента(Договор_УХ, ВладелецДоговора, НомерСтроки, ВыводитьОшибку = Истина)
	
	Если Не ЗначениеЗаполнено(Договор_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен ГУИД (Договор контрагента) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();	
	КонецЕсли;
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Договор_УХ));
	
	//++ 28.02.2020 vyacss
	//Если ДоговорКонтрагента.ПолучитьОбъект() = Неопределено Тогда
	//	ДоговорКонтрагента = Неопределено;
	//КонецЕсли;
	Попытка
		Если ДоговорКонтрагента.ПолучитьОбъект() = Неопределено Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Исключение
	    ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецПопытки;	
	//-- 28.02.2020 vyacss
	
	ЗнчНайдено = ЗначениеЗаполнено(ДоговорКонтрагента);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+Договор_УХ+"(Договор контрагента) - "+?(ЗнчНайдено,ДоговорКонтрагента,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено ИЛИ Не ВыводитьОшибку,Ложь,Истина), 
															3);
	
	Возврат ДоговорКонтрагента;
	
КонецФункции

Функция ПолучитьСтатьюДвиженияДС(Статья_УХ, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(Статья_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен ГУИД (Статья ДДС) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Неопределено;	
	КонецЕсли;
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(Статья_УХ);
	
	ЗнчНайдено = ЗначениеЗаполнено(СтатьяДДС);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+Статья_УХ+"(Статья ДДС) - "+?(ЗнчНайдено,СтатьяДДС,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат СтатьяДДС;
	
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаНДС_УХ, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(СтавкаНДС_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнена ставка (Ставка НДС) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Неопределено;	
	КонецЕсли;
	
	СтавкаНДС = Перечисления.СтавкиНДС[СтавкаНДС_УХ];
	
	ЗнчНайдено = ЗначениеЗаполнено(СтавкаНДС);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+СтавкаНДС_УХ+"(Ставка НДС) - "+?(ЗнчНайдено,СтавкаНДС,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция ПолучитьВидОперацииУПП(ВидОбъекта_УХ, ВидОперации_УХ, ТипДокумента_УПП, НомерСтроки)
	
	Если Не ЗначениеЗаполнено(ВидОбъекта_УХ) Тогда
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: не заполнен вид операции (Вид операции) в строке: "+НомерСтроки, , Истина, 3);
		
		Возврат Неопределено;	
	КонецЕсли;
	
	ВидОперацииУПП = Неопределено;
	
	Если ВидОбъекта_УХ = "ПоступлениеНаРасчетныйСчет" Тогда
		
		Если ВидОперации_УХ = "ОплатаПокупателя" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;	
		ИначеЕсли ВидОперации_УХ = "ВозвратОтПоставщика" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком;	
		ИначеЕсли ВидОперации_УХ = "ПолучениеЗайма" 
			ИЛИ ВидОперации_УХ = "ВозвратЗаймаКонтрагентом"
			ИЛИ ВидОперации_УХ = "ПолучениеКредита" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;		
		ИначеЕсли ВидОперации_УХ = "ПрочиеРасчетыСКонтрагентами"
			ИЛИ ВидОперации_УХ = "ОплатаОтФакторинговойКомпании" 
			ИЛИ ВидОперации_УХ = "Инкассация" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;	
		ИначеЕсли ВидОперации_УХ = "ПоступлениеОплатыПоПлатежнымКартам" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам;
		ИначеЕсли ВидОперации_УХ = "ВозвратЗаймаРаботником" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
		ИначеЕсли ВидОперации_УХ = "ПрочееПоступление" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;			
		ИначеЕсли ВидОперации_УХ = "ПриобретениеИностраннойВалюты" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты;	
		ИначеЕсли ВидОперации_УХ = "ПоступленияОтПродажиИностраннойВалюты" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;			
		ИначеЕсли ВидОперации_УХ = "ПереводСДругогоСчета" Тогда
			ВидОперацииУПП = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств;
		КонецЕсли;
		
	ИначеЕсли ВидОбъекта_УХ = "СписаниеСРасчетногоСчета" Тогда
		
		Если ТипДокумента_УПП = Тип("ДокументОбъект.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
			
			Если ВидОперации_УХ = "ВозвратПоставщику" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;	
			ИначеЕсли ВидОперации_УХ = "ПеречислениеНалога" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;	
			ИначеЕсли ВидОперации_УХ = "РасчетыПоКредитамИЗаймам" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;	
			ИначеЕсли ВидОперации_УХ = "ВыдачаЗаймаКонтрагенту" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
			ИначеЕсли ВидОперации_УХ = "ПрочиеРасчетыСКонтрагентами"
				ИЛИ ВидОперации_УХ = "ПеречислениеНалогаЗаТретьихЛиц" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперации_УХ = "ПереводНаДругойСчет" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет;
			ИначеЕсли ВидОперации_УХ = "ПеречислениеПодотчетномуЛицу" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику;
			ИначеЕсли ВидОперации_УХ = "ОплатаПоставщику" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
			ИначеЕсли ВидОперации_УХ = "ПеречислениеЗП"
				ИЛИ ВидОперации_УХ = "КомиссияБанка"
				ИЛИ ВидОперации_УХ = "ПрочееСписание"
				ИЛИ ВидОперации_УХ = "ВыдачаЗаймаРаботнику"
				ИЛИ ВидОперации_УХ = "ПеречислениеДивидендов"
				ИЛИ ВидОперации_УХ = "ПеречислениеДепонентов"
				ИЛИ ВидОперации_УХ = "ПеречислениеСотрудникуПоДоговоруПодряда"
				ИЛИ ВидОперации_УХ = "ПеречислениеЗаработнойПлатыРаботнику"Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		ИначеЕсли ТипДокумента_УПП = Тип("ДокументОбъект.ПлатежноеПоручениеИсходящее") Тогда
			
			Если ВидОперации_УХ = "ВозвратПоставщику" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;	
			ИначеЕсли ВидОперации_УХ = "ПеречислениеНалога" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;	
			ИначеЕсли ВидОперации_УХ = "РасчетыПоКредитамИЗаймам" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;	
			ИначеЕсли ВидОперации_УХ = "ВыдачаЗаймаКонтрагенту" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;
			ИначеЕсли ВидОперации_УХ = "ПрочиеРасчетыСКонтрагентами"
				ИЛИ ВидОперации_УХ = "ПеречислениеНалогаЗаТретьихЛиц" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
			ИначеЕсли ВидОперации_УХ = "ПереводНаДругойСчет" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет;
			ИначеЕсли ВидОперации_УХ = "ПеречислениеПодотчетномуЛицу" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
			ИначеЕсли ВидОперации_УХ = "ОплатаПоставщику" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
			ИначеЕсли ВидОперации_УХ = "ПеречислениеЗП"
				ИЛИ ВидОперации_УХ = "КомиссияБанка"
				ИЛИ ВидОперации_УХ = "ПрочееСписание" 
				ИЛИ ВидОперации_УХ = "ВыдачаЗаймаРаботнику"
				ИЛИ ВидОперации_УХ = "ПеречислениеДивидендов"
				ИЛИ ВидОперации_УХ = "ПеречислениеДепонентов"
				ИЛИ ВидОперации_УХ = "ПеречислениеСотрудникуПоДоговоруПодряда"
				ИЛИ ВидОперации_УХ = "ПеречислениеЗаработнойПлатыРаботнику" Тогда
				ВидОперацииУПП = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	ЗнчНайдено = ЗначениеЗаполнено(ВидОперацииУПП);
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Конвертация объекта: "+ВидОперации_УХ+"(Вид операции) - "+?(ЗнчНайдено,ВидОперацииУПП,"соответствие не найдено в строке: "+НомерСтроки),
															, 
															?(ЗнчНайдено,Ложь,Истина), 
															3);
	
	Возврат ВидОперацииУПП;
	
КонецФункции

Функция УстановитьСоединениеСУХ()
	
	//Параметры подключения на 20.08.19
	АдресВебСервиса				= ПДО_глЗначениеПеременной("ПараметрыWS_ExchangeUH_Адрес");//"https://1cweb.tatneft.ru/UH8test5/ws/ExchangeUH?wsdl";
	ЛогинВебСервиса				= ПДО_глЗначениеПеременной("ПараметрыWS_ExchangeUH_Логин");//"DZO_NIGNEKAMSKTEH";
	ПарольВебСервиса			= ПДО_глЗначениеПеременной("ПараметрыWS_ExchangeUH_Пароль");//"dkWg9QZH";
	URIПространстваИменСервиса	= ПДО_глЗначениеПеременной("ПараметрыWS_ExchangeUH_URIПространстваИмен");//"http://localhost/ExchangeUH"
	ИмяСервиса					= ПДО_глЗначениеПеременной("ПараметрыWS_ExchangeUH_ИмяСервиса");//"ExchangeUH"
	ИмяТочкиПодключения			= ПДО_глЗначениеПеременной("ПараметрыWS_ExchangeUH_ИмяТочкиПодключения");//"ExchangeUHSoap"
	
	WSОпределение = Новый WSОпределения(АдресВебСервиса,ЛогинВебСервиса,ПарольВебСервиса);
	Сервис = Новый WSПрокси(WSОпределение, URIПространстваИменСервиса, ИмяСервиса, ИмяТочкиПодключения,,1200);  
	Сервис.Пользователь	= ЛогинВебСервиса;
	Сервис.Пароль		= ПарольВебСервиса;
	     
	Возврат Сервис;
	
КонецФункции

Процедура СоздатьБанковскиеСчета(Отказ)	
	
	//Если Отказ Тогда
	//	Возврат;	
	//КонецЕсли;
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= ПолученныеБанковскиеСчета.Количество();
		мФормаПрогрессора.КомментарийЗначения	= "Создано банковских счетов: 0";

		Сообщить("Начало создания банковских счетов");
	#КонецЕсли
	
	Для Каждого Строка Из ПолученныеБанковскиеСчета Цикл	
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Если мФормаПрогрессора <> Неопределено Тогда
				мФормаПрогрессора.Значение 				= мФормаПрогрессора.Значение + 1;
				мФормаПрогрессора.КомментарийЗначения 	= "Создано банковских счетов: " + мФормаПрогрессора.Значение;
			КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(Строка.БанковскийСчет) Тогда
			БанковскийСчет = Строка.БанковскийСчет.ПолучитьОбъект();
			БанковскийСчет.Заблокировать();
			БанковскийСчет.ПометкаУдаления			= Строка.ПометкаУдаления;
			БанковскийСчет.ВидСчета					= Строка.ВидСчета;
			БанковскийСчет.ВалютаДенежныхСредств	= Строка.Валюта;
			//БанковскийСчет.Наименование				= Лев(Строка.НомерСчета + ?(НЕ Строка.Банк.Пустая(), ", " + Строка.Банк, ""), 100);
		Иначе	
			Если Строка.ПометкаУдаления Тогда
				Продолжить;	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ВладелецСчета)
				ИЛИ Не ЗначениеЗаполнено(Строка.Банк) Тогда
				// rarus kzn maksma 000000242896 05.03.2020 { отказов не должно быть по задаче, но и создавать не нужно
				// Отказ = Истина;
				// rarus kzn maksma 000000242896 05.03.2020 }
				Продолжить;
			КонецЕсли;
			
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.Код						= Строка.Код;
			БанковскийСчет.Банк						= Строка.Банк;
			БанковскийСчет.БанкДляРасчетов			= БанковскийСчет.Банк;
			БанковскийСчет.Владелец					= Строка.ВладелецСчета;
			БанковскийСчет.ВидСчета					= Строка.ВидСчета;
			БанковскийСчет.НомерСчета				= Строка.НомерСчета;
			БанковскийСчет.ВалютаДенежныхСредств	= Строка.Валюта;
			БанковскийСчет.Наименование				= Лев(Строка.НомерСчета + ?(НЕ Строка.Банк.Пустая(), ", " + Строка.Банк, ""), 100);
		КонецЕсли;
		
		Попытка
			БанковскийСчет.ОбменДанными.Загрузка = Истина;
			БанковскийСчет.Записать();
			
			Если БанковскийСчет.Заблокирован() Тогда
				БанковскийСчет.Разблокировать();
			КонецЕсли;
			
			Строка.БанковскийСчет = БанковскийСчет.Ссылка;
			
			мСчетчикЗагруженныхОбъектов = мСчетчикЗагруженныхОбъектов + 1;
			
			СтруктураЗаписи = мУниверсальныйОбменДанными.ПолучитьСтруктуруЗаписиПротокола();
			СтруктураЗаписи.ТипОбъекта	= Тип("СправочникСсылка.БанковскиеСчета");
			СтруктураЗаписи.Объект		= БанковскийСчет;
			мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Загрузка объекта:", СтруктураЗаписи, Ложь, 1);
		Исключение
			// rarus kzn maksma 000000242896 05.03.2020 { отказов не должно быть по задаче, но и создавать не нужно
			// Отказ = Истина;
			// rarus kzn maksma 000000242896 05.03.2020 }
			
			СтрокаОшибки = ОписаниеОшибки();
		
			мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Ошибка при загрузке данных: " + СтрокаОшибки, Неопределено, Истина, 1, , Истина);
				
			//Сообщить("Не удалось записать банковский счет: " + Строка.НомерСчета + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Окончание создания банковских счетов. Обработано: "+мФормаПрогрессора.Значение);
	#КонецЕсли
	
КонецПроцедуры

Процедура СоздатьДоговоры(Отказ)
	
	//Если Отказ Тогда
	//	Возврат;	
	//КонецЕсли;
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= ПолученныеДоговоры.Количество();
		мФормаПрогрессора.КомментарийЗначения	= "Создано договоров контрагентов: 0";

		Сообщить("Начало создания договоров контрагентов");
	#КонецЕсли
	
	//Проверяем и добавляем группы
	Для Каждого Элемент Из ПолученныеДоговоры Цикл			
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Если мФормаПрогрессора <> Неопределено Тогда
				мФормаПрогрессора.Значение 				= мФормаПрогрессора.Значение + 1;
				мФормаПрогрессора.КомментарийЗначения 	= "Создано договоров контрагентов: " + мФормаПрогрессора.Значение;
			КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(Элемент.ДоговорКонтрагента) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Элемент.Контрагент) Тогда
			// rarus kzn maksma 000000242896 05.03.2020 { отказов не должно быть по задаче, но и создавать не нужно
			// Отказ = Истина;
			// rarus kzn maksma 000000242896 05.03.2020 }
			Продолжить;
		КонецЕсли;
		
		Если Элемент.Тип = "Группа" Тогда				
			Договор = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
			Договор.УстановитьСсылкуНового(Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Элемент.ГУИДДоговора)));
			Договор.Наименование	= Элемент.Наименование;
			Договор.Владелец		= Элемент.Контрагент;			
		Иначе 					
			Договор = СоздатьНовыйДоговор(Элемент);							
		КонецЕсли;
		
		Попытка
			Договор.ОбменДанными.Загрузка = Истина;
			Договор.Записать();
			
			Элемент.ДоговорКонтрагента = Договор.Ссылка;
			
			мСчетчикЗагруженныхОбъектов = мСчетчикЗагруженныхОбъектов + 1;
			
			СтруктураЗаписи = мУниверсальныйОбменДанными.ПолучитьСтруктуруЗаписиПротокола();
			СтруктураЗаписи.ТипОбъекта	= Тип("СправочникСсылка.ДоговорыКонтрагентов");
			СтруктураЗаписи.Объект		= Договор;
			мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Запись объекта:", СтруктураЗаписи, Ложь, 1);
		Исключение
			// rarus kzn maksma 000000242896 05.03.2020 { отказов не должно быть по задаче, но и создавать не нужно
			// Отказ = Истина;
			// rarus kzn maksma 000000242896 05.03.2020 }

			СтрокаОшибки = ОписаниеОшибки();
		
			мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Ошибка при загрузке данных: " + СтрокаОшибки, , Истина, 1, , Истина);
			
			//Сообщить("Ошибка при записи договора (Наименование =" + Элемент.Наименование + ")
			//|" + ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;		
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Окончание создания договоров контрагентов. Обработано: "+мФормаПрогрессора.Значение);
	#КонецЕсли
	
КонецПроцедуры

Процедура СоздатьДокументы(Отказ)
	
	#Если Клиент Тогда
	//Проверим наличие уже загруженных документов
	ЗагружатьПовторно = ОповеститьОНаличииЗагруженных();
	#КонецЕсли
	
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= ТЧДокументы.Количество();
		мФормаПрогрессора.КомментарийЗначения	= "Создано документов: 0";
	#КонецЕсли
	
	#Если Клиент Тогда
		Сообщить("Начало создания документов");
	#КонецЕсли
	
	Для Каждого Стр из ТЧДокументы цикл	
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Если мФормаПрогрессора <> Неопределено Тогда
				мФормаПрогрессора.Значение 				= мФормаПрогрессора.Значение + 1;
				мФормаПрогрессора.КомментарийЗначения 	= "Создано документов: " + мФормаПрогрессора.Значение;
			КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(Стр.ДокументСсылка)
			И Не ЗагружатьПовторно Тогда
			Продолжить;	
		КонецЕсли;
		
		ВидДокумента = ПолучитьВидДокументаУПП(Стр.ВидДокументаУХ, Стр.ВидОперацииУХ, Стр.СозданНаОснованииПлатежногоПоручения, ЗначениеЗаполнено(Стр.НомерВходящего), Стр.НомерСтроки);
		
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			Продолжить;	
		КонецЕсли;
		
		ДокументОбъект = СоздатьПолучитьДокумент(ВидДокумента, Стр.КодДокумента, Стр.ДатаДокумента, Стр.ДокументСсылка);
		
		Если ДокументОбъект.Проведен Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда		
			ЗаполнитьППВходящее(Стр, ДокументОбъект);		
		ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда	
			ЗаполнитьППИсходящее(Стр, ДокументОбъект);	
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда		
			ЗаполнитьПОВходящий(Стр, ДокументОбъект);	
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
			ЗаполнитьПОИсходящий(Стр, ДокументОбъект);	
		КонецЕсли;
		
		ЭтоНовыйДокумент = ДокументОбъект.ЭтоНовый();
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Стр.ДокументСсылка = ДокументОбъект.Ссылка;
								
				мСчетчикЗагруженныхОбъектов = мСчетчикЗагруженныхОбъектов + 1;
				
				СтруктураЗаписи = мУниверсальныйОбменДанными.ПолучитьСтруктуруЗаписиПротокола();
				СтруктураЗаписи.ТипОбъекта	= ТипЗнч(ДокументОбъект);
				СтруктураЗаписи.Объект		= ДокументОбъект;
				мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Запись объекта:", СтруктураЗаписи, Ложь, 1);
			Исключение
				// rarus kzn maksma 000000242896 05.03.2020 { отказов не должно быть по задаче, документ должен просто записаться.
				// Отказ = Истина;
				// rarus kzn maksma 000000242896 05.03.2020 }
				
				СтрокаОшибки = ОписаниеОшибки();
				
				мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("Ошибка при загрузке данных: " + СтрокаОшибки, , Истина, 1, , Истина);
			
				//Сообщить("Ошибка при записи документа """ + ДокументОбъект + """" + ОписаниеОшибки(), СтатусСообщения.Внимание);			
			КонецПопытки;	
		КонецЕсли;
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Окончание создания документов. Обработано: "+мФормаПрогрессора.Значение);
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗагрузитьБанковскиеСчета(БанковскиеСчетаСписокXDTO, СервисФабрикаXDTO)
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= БанковскиеСчетаСписокXDTO.Количество();
		мФормаПрогрессора.КомментарийЗначения	= "Загружено банковских счетов: 0";
	#КонецЕсли
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ПРАВИЛО ЗАГРУЗКИ ДАННЫХ: Банковский счет", , Ложь, 1);
	
	#Если Клиент Тогда
		Сообщить("Начало загрузки банковских счетов");
	#КонецЕсли
	
	Для Каждого ОбъектXDTO Из БанковскиеСчетаСписокXDTO Цикл	
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ЗАГРУЗКА ОБЪЕКТА: "+ОбъектXDTO.НомерСчета, , Ложь, 2);
		
		НС_БанковскийСчет = ПолученныеБанковскиеСчета.Добавить();
		НС_БанковскийСчет.ВладелецСчета		= ПолучитьКонтрагента(ОбъектXDTO.Владелец, НС_БанковскийСчет.НомерСтроки);		
		НС_БанковскийСчет.Код				= ОбъектXDTO.Код;
		НС_БанковскийСчет.Банк				= ПолучитьБанк(ОбъектXDTO.Банк, НС_БанковскийСчет.НомерСтроки);	
		НС_БанковскийСчет.ВидСчета			= ОбъектXDTO.ВидСчета;
		НС_БанковскийСчет.НомерСчета		= ОбъектXDTO.НомерСчета;
		НС_БанковскийСчет.ПометкаУдаления	= ОбъектXDTO.ПометкаУдаления;
		НС_БанковскийСчет.Валюта			= ПолучитьВалюту(ОбъектXDTO.Валюта, НС_БанковскийСчет.НомерСтроки);
		НС_БанковскийСчет.БанковскийСчет	= ПолучитьБанковскийСчет(ОбъектXDTO.НомерСчета, ОбъектXDTO.Банк, НС_БанковскийСчет.ВладелецСчета, НС_БанковскийСчет.НомерСтроки, НС_БанковскийСчет.Валюта, Ложь);
		НС_БанковскийСчет.Примечание		= ОбъектXDTO.Примечание;
		
		// rarus kzn maksma 000000242896  { выводим пользователю, но при создании обходим их стороной.
		// а пока запишем их как не заруженные.
		ОбъектНайденВБазе = НЕ НС_БанковскийСчет.БанковскийСчет.Пустая();
		ЗаписатьДляПоследующейОбработки(СервисФабрикаXDTO, ОбъектXDTO, Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.БанковскийСчет, ОбъектНайденВБазе);
		// rarus kzn maksma 000000242896  }
		
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Если мФормаПрогрессора <> Неопределено Тогда
				мФормаПрогрессора.Значение 				= мФормаПрогрессора.Значение + 1;
				мФормаПрогрессора.КомментарийЗначения 	= "Загружено банковских счетов: " + мФормаПрогрессора.Значение;
			КонецЕсли;
		#КонецЕсли
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Окончание загрузки банковских счетов. Обработано: "+мФормаПрогрессора.Значение);
	#КонецЕсли
		
КонецПроцедуры

Процедура ЗагрузитьДоговорыКонтрагентов(ДоговорыКонтрагентовСписокXDTO, СервисФабрикаXDTO)
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= ДоговорыКонтрагентовСписокXDTO.Количество();
		мФормаПрогрессора.КомментарийЗначения	= "Загружено договорок контрагентов: 0";
	#КонецЕсли
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ПРАВИЛО ЗАГРУЗКИ ДАННЫХ: Договоры контрагентов", , Ложь, 1);
	
	#Если Клиент Тогда
		Сообщить("Начало загрузки договоров контрагентов");
	#КонецЕсли
	
	Для Каждого ОбъектXDTO Из ДоговорыКонтрагентовСписокXDTO Цикл	
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ЗАГРУЗКА ОБЪЕКТА: "+ОбъектXDTO.Наименование, , Ложь, 2);
		
		НС_Договор = ПолученныеДоговоры.Добавить();
		НС_Договор.Родитель					= Новый УникальныйИдентификатор(ОбъектXDTO.Родитель);
		НС_Договор.ГУИДДоговора				= Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка);
		НС_Договор.Контрагент				= ПолучитьКонтрагента(ОбъектXDTO.Владелец, НС_Договор.НомерСтроки);
		НС_Договор.Наименование				= ОбъектXDTO.Наименование;		
		НС_Договор.ВалютаВзаиморасчетов		= ПолучитьВалюту(ОбъектXDTO.ВалютаВзаиморасчетов, НС_Договор.НомерСтроки);
		НС_Договор.ВидДоговора				= ОбъектXDTO.ВидДоговора;
		НС_Договор.Дата						= ОбъектXDTO.Дата;
		НС_Договор.ДатаДоговора				= ОбъектXDTO.ДатаСогласования;
		НС_Договор.ДатаНачала				= ОбъектXDTO.СрокДействияС;
		НС_Договор.НачалоОплат				= ОбъектXDTO.СрокДействияС;
		НС_Договор.Код_орг					= Организация.Код;	
		НС_Договор.НомерДоговора			= ОбъектXDTO.Номер;
		НС_Договор.ОплатаДо					= ОбъектXDTO.СрокДействияПо;
		НС_Договор.ОкончаниеОплат			= ОбъектXDTO.СрокДействияПо;
		НС_Договор.ПредметДоговора			= ОбъектXDTO.ПредметДоговора;
		НС_Договор.СуммаДоговора			= ОбъектXDTO.СуммаДоговора;
		НС_Договор.Тип                      = ?(ОбъектXDTO.ЭтоГруппа, "Группа", "Элемент");
		НС_Договор.БанковскийСчет			= ПолучитьБанковскийСчет(ОбъектXDTO.СчетКонтрагента, ОбъектXDTO.СчетКонтрагентаБИК, НС_Договор.Контрагент, НС_Договор.НомерСтроки, НС_Договор.ВалютаВзаиморасчетов);
		НС_Договор.ДоговорКонтрагента		= ПолучитьДоговорКонтрагента(НС_Договор.ГУИДДоговора, НС_Договор.Контрагент, НС_Договор.НомерСтроки, Ложь);
		
		// rarus kzn maksma 000000242896  { выводим пользователю, но при создании обходим их стороной.
		// а пока запишем их как не заруженные.
		ОбъектНайденВБазе =  НЕ НС_Договор.ДоговорКонтрагента.Пустая();
		ЗаписатьДляПоследующейОбработки(СервисФабрикаXDTO, ОбъектXDTO, Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.Договор, ОбъектНайденВБазе);
		// rarus kzn maksma 000000242896  }

		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Если мФормаПрогрессора <> Неопределено Тогда
				мФормаПрогрессора.Значение 				= мФормаПрогрессора.Значение + 1;
				мФормаПрогрессора.КомментарийЗначения 	= "Загружено договоров контрагентов: " + мФормаПрогрессора.Значение;
			КонецЕсли;
		#КонецЕсли
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Окончание загрузки договоров контрагентов. Обработано: "+мФормаПрогрессора.Значение);
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗагрузитьДокументы(ДокументыСписокXDTO, ВидДокумента, ПредставлениеВидаДокумента, Отказ, СервисФабрикаXDTO)
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= ДокументыСписокXDTO.Количество();
		мФормаПрогрессора.КомментарийЗначения	= "Загружено документов " + ПредставлениеВидаДокумента + ": 0";
	#КонецЕсли
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ПРАВИЛО ЗАГРУЗКИ ДАННЫХ: "+ПредставлениеВидаДокумента, , Ложь, 1);
	
	#Если Клиент Тогда
		Сообщить("Начало загрузки документов "+ПредставлениеВидаДокумента);
	#КонецЕсли
	
	Для Каждого ОбъектXDTO Из ДокументыСписокXDTO Цикл	
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Если мФормаПрогрессора <> Неопределено Тогда
				мФормаПрогрессора.Значение 				= мФормаПрогрессора.Значение + 1;
				мФормаПрогрессора.КомментарийЗначения 	= "Загружено документов " + ПредставлениеВидаДокумента + ": " + мФормаПрогрессора.Значение;
			КонецЕсли;
		#КонецЕсли		
		
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ЗАГРУЗКА ОБЪЕКТА: "+ОбъектXDTO.Ссылка, , Ложь, 2);
		
		КлючСвязи = Строка(Новый УникальныйИдентификатор);
		
		НС_Документы = ТЧДокументы.Добавить();
		НС_Документы.КлючСвязи			= КлючСвязи;
		НС_Документы.ВидДокументаУХ		= ВидДокумента;
		НС_Документы.ВидОперацииУХ		= ОбъектXDTO.ВидОперации;
		НС_Документы.ДатаДокумента		= ОбъектXDTO.Дата;
		НС_Документы.НомерДокумента		= ОбъектXDTO.Номер;
		НС_Документы.СуммаДокумента		= ОбъектXDTO.СуммаДокумента;		
		НС_Документы.Контрагент			= ПолучитьКонтрагента(ОбъектXDTO.Контрагент, НС_Документы.НомерСтроки);		
		НС_Документы.НазначениеПлатежа	= ОбъектXDTO.НазначениеПлатежа;
		НС_Документы.ВалютаДокумента	= ПолучитьВалюту(ОбъектXDTO.ВалютаДокумента, НС_Документы.НомерСтроки);
		НС_Документы.ДатаВходящего		= ОбъектXDTO.ВхДата;
		НС_Документы.НомерВходящего		= ОбъектXDTO.ВхНомер;
		НС_Документы.КодДокумента		= ОбъектXDTO.Ссылка;
		НС_Документы.СозданНаОснованииПлатежногоПоручения = ?(ВидДокумента = "СписаниеСРасчетногоСчета", ОбъектXDTO.СозданНаОснованииПлатежногоПоручения, Ложь);
		НС_Документы.СчетОрганизации	= ПолучитьБанковскийСчет(ОбъектXDTO.СчетОрганизации, ОбъектXDTO.СчетОрганизацииБИК, Организация, НС_Документы.НомерСтроки, НС_Документы.ВалютаДокумента);
		НС_Документы.СчетКонтрагента	= ПолучитьБанковскийСчет(ОбъектXDTO.СчетКонтрагента, ОбъектXDTO.СчетКонтрагентаБИК, НС_Документы.Контрагент, НС_Документы.НомерСтроки, НС_Документы.ВалютаДокумента);
		НС_Документы.ДокументСсылка		= ПолучитьСсылкуНаДокументПоУИДу(НС_Документы.ВидДокументаУХ, 
																		НС_Документы.ВидОперацииУХ, 
																		НС_Документы.КодДокумента, 
																		НС_Документы.СозданНаОснованииПлатежногоПоручения, 
																		ЗначениеЗаполнено(ОбъектXDTO.ВхНомер), 
																		НС_Документы.НомерСтроки);
		
		Сч = 0;
		
		Для Каждого Строка Из ОбъектXDTO.ТабЧасть.Строки Цикл
			НС_РасшифровкаПлатежа = РасшифровкаПлатежа.Добавить();
			НС_РасшифровкаПлатежа.КлючСвязи = КлючСвязи;
			НС_РасшифровкаПлатежа.Договор	= ПолучитьДоговорКонтрагента(Строка.Договор, НС_Документы.Контрагент, НС_Документы.НомерСтроки);
			НС_РасшифровкаПлатежа.СтавкаНДС = ПолучитьСтавкуНДС(Строка.СтавкаНДС, НС_Документы.НомерСтроки);
			НС_РасшифровкаПлатежа.Сумма		= Строка.Сумма;
			НС_РасшифровкаПлатежа.СуммаНДС	= Строка.СуммаНДС;
			
			НайденнаяСтрока = ОбъектXDTO.ТабЧастьСтатьи.Строки.Получить(Сч);
			НС_РасшифровкаПлатежа.Статья = ПолучитьСтатьюДвиженияДС(НайденнаяСтрока.Статья, НС_Документы.НомерСтроки);
			
			Сч = Сч + 1;
		КонецЦикла;
		
		// rarus kzn maksma 000000242896  { выводим пользователю, но при создании обходим их стороной.
		Если Врег(ВидДокумента) = ВРег("ПоступлениеНаРасчетныйСчет") Тогда 
			ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.ПоступлениеНаРасчетныйСчет;
		ИначеЕсли Врег(ВидДокумента) = ВРег("СписаниеСРасчетногоСчета") Тогда
			ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.СписаниеСРасчетногоСчета;
		Иначе
			ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.ПустаяСсылка();
		КонецЕсли;
		ОбъектНайденВБазе = НЕ НС_Документы.Контрагент.Пустая() ИЛИ НС_Документы.ДокументСсылка <> Неопределено;
		ЗаписатьДляПоследующейОбработки(СервисФабрикаXDTO, ОбъектXDTO, ТипОбъекта, ОбъектНайденВБазе);
		// rarus kzn maksma 000000242896  }

		
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Окончание загрузки документов "+ПредставлениеВидаДокумента+". Обработано: "+мФормаПрогрессора.Значение);
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗагрузитьКонтрагентов(КонтрагентыСписокXDTO, СервисФабрикаXDTO)
	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение 				= 0;
		мФормаПрогрессора.МаксимальноеЗначение	= КонтрагентыСписокXDTO.Количество();
		мФормаПрогрессора.КомментарийЗначения	= "Загружено контрагентов: 0";
	#КонецЕсли
	
	мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ПРАВИЛО ЗАГРУЗКИ ДАННЫХ: Контрагенты", , Ложь, 1);
	
	#Если Клиент Тогда
		Сообщить("Начало загрузки контрагентов");
	#КонецЕсли
	
	Для Каждого ОбъектXDTO Из КонтрагентыСписокXDTO Цикл	
		мУниверсальныйОбменДанными.ЗаписатьВПротоколВыполнения("ЗАГРУЗКА ОБЪЕКТА: "+ОбъектXDTO.Наименование, , Ложь, 2);
		
		НС_Контрагенты = ПолученныеКонтрагенты.Добавить();
		Контрагент	= ПолучитьКонтрагента(ОбъектXDTO.Код, НС_Контрагенты.НомерСтроки);
		// 
		Если Контрагент.Пустая() Тогда
			Контрагент = ПолучитьКонтрагентаПоИННКПП(ОбъектXDTO.ИНН, ОбъектXDTO.КПП, НС_Контрагенты.НомерСтроки, ОбъектXDTO.Код);
		КонецЕсли;
		
		// не нашли по ИНН и КПП запишем его в РС как ошибочный.
		ОбъектНайденВБазе = НЕ Контрагент.Пустая();
		ЗаписатьДляПоследующейОбработки(СервисФабрикаXDTO, ОбъектXDTO, Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.Контрагент, ОбъектНайденВБазе);
		//
		
		ЗаполнитьЗначенияСвойств(НС_Контрагенты, ОбъектXDTO);
		НС_Контрагенты.КодSAP	   = ОбъектXDTO.Код;
		НС_Контрагенты.Контрагент  = Контрагент;
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			
			Если мФормаПрогрессора <> Неопределено Тогда
				мФормаПрогрессора.Значение 				= мФормаПрогрессора.Значение + 1;
				мФормаПрогрессора.КомментарийЗначения 	= "Загружено контрагентов: " + мФормаПрогрессора.Значение;
			КонецЕсли;
		#КонецЕсли
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Окончание загрузки контрагентов. Обработано: "+мФормаПрогрессора.Значение);
	#КонецЕсли
		
КонецПроцедуры

Функция ПолучитьНомерДокумента(ИсходныйНомер, Знач Длина, Префикс="")
	
	Если ЗначениеЗаполнено(Префикс)
		И ТипЗнч(Префикс) = Тип("Строка") Тогда	
		Длина = Длина - СтрДлина(Префикс);		
	КонецЕсли;
	
	Возврат Префикс+СтрЗаменить(Формат(Число(ИсходныйНомер),"ЧЦ="+Длина+"; ЧВН="),Символы.НПП,"");
	
КонецФункции

// Параметры: 
// ТипОбъекта - Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ
Процедура ЗаписатьДляПоследующейОбработки(Знач СервисФабрикаXDTO, Знач ОбъектXDTO, ТипОбъекта, ОбъектНайденВБазе)
	
	ОбъектЗаписанВРС = ЭтотОбъектЕстьВРС(ОбъектXDTO.Ссылка, ТипОбъекта);	
			
	Если НЕ ОбъектНайденВБазе И НЕ ОбъектЗаписанВРС Тогда
		Запись = РегистрыСведений.Рарус_НеЗагруженныеДанныеИзУХ.СоздатьМенеджерЗаписи();
		Запись.ТипОбъекта = ТипОбъекта;
		Запись.Идентификатор = ОбъектXDTO.Ссылка;
		Запись.СтрокаXML =  СтрокаXMLИзОбъектаXML(СервисФабрикаXDTO, ОбъектXDTO);
		Запись.Обработано = Ложь;
		Запись.Записать();
	КонецЕсли;
	
	Если ОбъектНайденВБазе И ОбъектЗаписанВРС Тогда
		Запись = РегистрыСведений.Рарус_НеЗагруженныеДанныеИзУХ.СоздатьМенеджерЗаписи();
		Запись.ТипОбъекта = ТипОбъекта;
		Запись.Идентификатор = ОбъектXDTO.Ссылка;
		Запись.Прочитать();
		Запись.Обработано = Истина;
		Запись.Записать();
	КонецЕсли;
	
КонецПроцедуры


Функция СтрокаXMLИзОбъектаXML(Знач СервисФабрикаXDTO, Знач ОбъектXDTO)
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	СервисФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML
КонецФункции

Функция ОбъектXDTOИзСтрокиXML(СтрокаXML, СервисФабрикаXDTO, ТипXDTO)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ОбъектXDTO = СервисФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	Возврат ОбъектXDTO;
КонецФункции

Функция СоздатьСписокXDTO(ИмяТипа, СервисФабрикаXDTO)
	ТипОбъектаСписок = СервисФабрикаXDTO.Тип("http://localhost/ExchangeUH", ИмяТипа);	
	СписокXDTO = СервисФабрикаXDTO.Создать(ТипОбъектаСписок);
	Возврат СписокXDTO;
КонецФункции

Процедура ЗагрузкаНеОбработанныхДанных(СервисФабрикаXDTO)
	
	КонтрагентТипXDTO = СервисФабрикаXDTO.Тип("http://localhost/ExchangeUH", "Контрагент");
	БанковскийСчетТипXDTO = СервисФабрикаXDTO.Тип("http://localhost/ExchangeUH", "БанковскийСчет");
	ДоговорТипXDTO = СервисФабрикаXDTO.Тип("http://localhost/ExchangeUH", "ДоговорКонтрагента");
	ПРСТипXDTO = СервисФабрикаXDTO.Тип("http://localhost/ExchangeUH", "ПоступлениеНаРасчетныйСчет");
	СРСТипXDTO = СервисФабрикаXDTO.Тип("http://localhost/ExchangeUH", "СписаниеСРасчетногоСчета");
	
	
	СписокКонтрагентов = СоздатьСписокXDTO("Контрагенты", СервисФабрикаXDTO);
	СписокБанковскихСчетов = СоздатьСписокXDTO("БанковскиеСчета", СервисФабрикаXDTO);
	СписокДоговров = СоздатьСписокXDTO("ДоговорыКонтрагентов", СервисФабрикаXDTO);
	СписокПРС = СоздатьСписокXDTO("ПоступленияНаРасчетныйСчет", СервисФабрикаXDTO);
	СписокСРС = СоздатьСписокXDTO("СписанияСРасчетногоСчета", СервисФабрикаXDTO);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рарус_НеЗагруженныеДанныеИзУХ.Идентификатор,
		|	Рарус_НеЗагруженныеДанныеИзУХ.ТипОбъекта,
		|	Рарус_НеЗагруженныеДанныеИзУХ.Обработано,
		|	Рарус_НеЗагруженныеДанныеИзУХ.СтрокаXML
		|ИЗ
		|	РегистрСведений.Рарус_НеЗагруженныеДанныеИзУХ КАК Рарус_НеЗагруженныеДанныеИзУХ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.Контрагент Тогда
			ОбъектXDTO = ОбъектXDTOИзСтрокиXML(Выборка.СтрокаXML, СервисФабрикаXDTO, КонтрагентТипXDTO);
			СписокКонтрагентов.Строки.Добавить(ОбъектXDTO);
		
		ИначеЕсли Выборка.ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.БанковскийСчет  Тогда
			ОбъектXDTO = ОбъектXDTOИзСтрокиXML(Выборка.СтрокаXML, СервисФабрикаXDTO, БанковскийСчетТипXDTO);
			СписокБанковскихСчетов.Строки.Добавить(ОбъектXDTO);
			
		ИначеЕсли Выборка.ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.Договор  Тогда
			ОбъектXDTO = ОбъектXDTOИзСтрокиXML(Выборка.СтрокаXML, СервисФабрикаXDTO, ДоговорТипXDTO);
			СписокДоговров.Строки.Добавить(ОбъектXDTO);
			
		ИначеЕсли Выборка.ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.ПоступлениеНаРасчетныйСчет Тогда
			ОбъектXDTO = ОбъектXDTOИзСтрокиXML(Выборка.СтрокаXML, СервисФабрикаXDTO, ПРСТипXDTO);
			СписокПРС.Строки.Добавить(ОбъектXDTO);

		ИначеЕсли  Выборка.ТипОбъекта = Перечисления.Рарус_ТипОбъектаЗагружаемыеИзУХ.СписаниеСРасчетногоСчета   Тогда
			ОбъектXDTO = ОбъектXDTOИзСтрокиXML(Выборка.СтрокаXML, СервисФабрикаXDTO, СРСТипXDTO);
			СписокСРС.Строки.Добавить(ОбъектXDTO);

		Иначе
		КонецЕсли;
			
	КонецЦикла;
	
	ЗагрузитьКонтрагентов(СписокКонтрагентов.Строки, СервисФабрикаXDTO);
	
	ЗагрузитьБанковскиеСчета(СписокБанковскихСчетов.Строки, СервисФабрикаXDTO);	

	ЗагрузитьДоговорыКонтрагентов(СписокДоговров.Строки, СервисФабрикаXDTO);
	
	ЗагрузитьДокументы(СписокПРС.Строки, "ПоступлениеНаРасчетныйСчет", "Поступление на расчетный счет", Ложь ,СервисФабрикаXDTO);
	
	ЗагрузитьДокументы(СписокСРС.Строки, "СписаниеСРасчетногоСчета", "Списание с расчетного счета", Ложь, СервисФабрикаXDTO);	
	
КонецПроцедуры	

Функция ЭтотОбъектЕстьВРС(ОбъектXDTOСсылка, ТипОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рарус_НеЗагруженныеДанныеИзУХ.Идентификатор
		|ИЗ
		|	РегистрСведений.Рарус_НеЗагруженныеДанныеИзУХ КАК Рарус_НеЗагруженныеДанныеИзУХ
		|ГДЕ
		|	Рарус_НеЗагруженныеДанныеИзУХ.Идентификатор = &Идентификатор
		|	И Рарус_НеЗагруженныеДанныеИзУХ.ТипОбъекта = &ТипОбъекта";
	
	Запрос.УстановитьПараметр("Идентификатор", ОбъектXDTOСсылка);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбъектЗаписанВРС = Ложь;
	Иначе
		ОбъектЗаписанВРС = Истина;
	КонецЕсли;

	Возврат ОбъектЗаписанВРС;
КонецФункции

Процедура ОчиститьОбработанныеДанныеРС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рарус_НеЗагруженныеДанныеИзУХ.Идентификатор,
		|	Рарус_НеЗагруженныеДанныеИзУХ.ТипОбъекта
		|ИЗ
		|	РегистрСведений.Рарус_НеЗагруженныеДанныеИзУХ КАК Рарус_НеЗагруженныеДанныеИзУХ
		|ГДЕ
		|	Рарус_НеЗагруженныеДанныеИзУХ.Обработано";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.Рарус_НеЗагруженныеДанныеИзУХ.СоздатьМенеджерЗаписи();
		Запись.ТипОбъекта = Выборка.ТипОбъекта;
		Запись.Идентификатор = Выборка.Идентификатор;
		Запись.Прочитать();
		Запись.Удалить();
	КонецЦикла;
	

КонецПроцедуры


#КонецОбласти

мШаблонКомментария		= "УХ: № %1 от %2";
мШаблонКомментарияПО	= "%1 УХ: %2 от %3";

//rarus kzn rezeda 19.09.2019 #22002{
Если ПараметрыСеанса.Рарус_СборСтатистикиИспользованияОбъектовВключен Тогда			
	НС_ПолныеПрава.ЗаписьСтатистикиИспользованияОбъектов("ВстроеннаяОбработка", СтрЗаменить(Строка(ЭтотОбъект), "ОбработкаОбъект.",""), ""); 
КонецЕсли;
//rarus kzn rezeda 19.09.2019 #22002}

